{"version":3,"sources":["webpack:///./node_modules/refractor/lang/autoit.js"],"names":["autoit","Prism","languages","comment","pattern","lookbehind","url","string","greedy","inside","variable","directive","alias","function","keyword","number","boolean","operator","punctuation","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,OAAA,CACAG,QAAA,CACA,MACA,CAEAC,QAAA,gEACAC,YAAA,IAGAC,IAAA,CACAF,QAAA,gDACAC,YAAA,GAEAE,OAAA,CACAH,QAAA,kCACAI,QAAA,EACAC,OAAA,CACAC,SAAA,iBAGAC,UAAA,CACAP,QAAA,cACAC,YAAA,EACAO,MAAA,WAEAC,SAAA,cAEAH,SAAA,UACAI,QAAA,yOACAC,OAAA,kDACAC,QAAA,sBACAC,SAAA,+CACAC,YAAA,eApCAC,EAAAC,QAAApB,EACAA,EAAAqB,YAAA,SACArB,EAAAsB,QAAA","file":"react-syntax-highlighter_languages_refractor_autoit.12fd9aaf9f14c93a72ec.js","sourcesContent":["'use strict'\n\nmodule.exports = autoit\nautoit.displayName = 'autoit'\nautoit.aliases = []\nfunction autoit(Prism) {\n  Prism.languages.autoit = {\n    comment: [\n      /;.*/,\n      {\n        // The multi-line comments delimiters can actually be commented out with \";\"\n        pattern: /(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,\n        lookbehind: true\n      }\n    ],\n    url: {\n      pattern: /(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n      lookbehind: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        variable: /([%$@])\\w+\\1/\n      }\n    },\n    directive: {\n      pattern: /(^\\s*)#\\w+/m,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    function: /\\b\\w+(?=\\()/,\n    // Variables and macros\n    variable: /[$@]\\w+/,\n    keyword: /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    boolean: /\\b(?:True|False)\\b/i,\n    operator: /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,\n    punctuation: /[\\[\\]().,:]/\n  }\n}\n"],"sourceRoot":""}