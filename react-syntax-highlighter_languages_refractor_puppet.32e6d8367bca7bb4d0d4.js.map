{"version":3,"sources":["webpack:///./node_modules/refractor/lang/puppet.js"],"names":["puppet","Prism","languages","heredoc","pattern","lookbehind","alias","inside","punctuation","greedy","multiline-comment","regex","extended-regex","comment","string","double-quoted","variable","attr-name","function","number","boolean","keyword","datatype","operator","interpolation","short-variable","delimiter","rest","module","exports","displayName","aliases"],"mappings":"6FAKA,SAAAA,EAAAC,IACG,SAAAA,GACHA,EAAAC,UAAAF,OAAA,CACAG,QAAA,CAEA,CACAC,QAAA,uGACAC,YAAA,EACAC,MAAA,SACAC,OAAA,CAEAC,YAAA,sBAKA,CACAJ,QAAA,qGACAC,YAAA,EACAI,QAAA,EACAH,MAAA,SACAC,OAAA,CAEAC,YAAA,sBAIA,CACAJ,QAAA,8CACAE,MAAA,SACAC,OAAA,CACAC,YAAA,CACAJ,QAAA,gBACAC,YAAA,MAKAK,oBAAA,CACAN,QAAA,4BACAC,YAAA,EACAI,QAAA,EACAH,MAAA,WAEAK,MAAA,CAEAP,QAAA,uFACAC,YAAA,EACAI,QAAA,EACAF,OAAA,CAEAK,iBAAA,CACAR,QAAA,yCACAG,OAAA,CACAM,QAAA,UAKAA,QAAA,CACAT,QAAA,eACAC,YAAA,EACAI,QAAA,GAEAK,OAAA,CAEAV,QAAA,wFACAK,QAAA,EACAF,OAAA,CACAQ,gBAAA,CACAX,QAAA,cACAG,OAAA,MAMAS,SAAA,CACAZ,QAAA,yBACAG,OAAA,CACAC,YAAA,OAGAS,YAAA,sBACAC,SAAA,CACA,CACAd,QAAA,gBACAC,YAAA,GAEA,oGAEAc,OAAA,+CACAC,QAAA,qBAEAC,QAAA,6IACAC,SAAA,CACAlB,QAAA,gNACAE,MAAA,UAEAiB,SAAA,mFACAf,YAAA,oBAEA,IAAAgB,EAAA,CACA,CAEApB,QAAA,0EACAC,YAAA,EACAE,OAAA,CACAkB,iBAAA,CAEArB,QAAA,uCACAC,YAAA,EACAC,MAAA,WACAC,OAAA,CACAC,YAAA,OAGAkB,UAAA,CACAtB,QAAA,MACAE,MAAA,YAEAqB,KAAA1B,EAAAC,UAAAF,SAGA,CACAI,QAAA,kCACAC,YAAA,EACAC,MAAA,WACAC,OAAA,CACAC,YAAA,QAIAP,EAAAC,UAAAF,OAAA,WAAAO,OAAAiB,gBACAvB,EAAAC,UAAAF,OAAA,OAAAO,OACA,iBACAA,OAAAiB,gBAvIG,CAwIAvB,GA5IH2B,EAAAC,QAAA7B,EACAA,EAAA8B,YAAA,SACA9B,EAAA+B,QAAA","file":"react-syntax-highlighter_languages_refractor_puppet.32e6d8367bca7bb4d0d4.js","sourcesContent":["'use strict'\n\nmodule.exports = puppet\npuppet.displayName = 'puppet'\npuppet.aliases = []\nfunction puppet(Prism) {\n  ;(function(Prism) {\n    Prism.languages.puppet = {\n      heredoc: [\n        // Matches the content of a quoted heredoc string (subject to interpolation)\n        {\n          pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n          lookbehind: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/\n            // See interpolation below\n          }\n        },\n        // Matches the content of an unquoted heredoc string (no interpolation)\n        {\n          pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/\n          }\n        },\n        // Matches the start tag of heredoc strings\n        {\n          pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n          alias: 'string',\n          inside: {\n            punctuation: {\n              pattern: /(\\().+?(?=\\))/,\n              lookbehind: true\n            }\n          }\n        }\n      ],\n      'multiline-comment': {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      },\n      regex: {\n        // Must be prefixed with the keyword \"node\" or a non-word char\n        pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // Extended regexes must have the x flag. They can contain single-line comments.\n          'extended-regex': {\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n            inside: {\n              comment: /#.*/\n            }\n          }\n        }\n      },\n      comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      string: {\n        // Allow for one nested level of double quotes inside interpolation\n        pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          'double-quoted': {\n            pattern: /^\"[\\s\\S]*\"$/,\n            inside: {\n              // See interpolation below\n            }\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      'attr-name': /(?:\\w+|\\*)(?=\\s*=>)/,\n      function: [\n        {\n          pattern: /(\\.)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\n      ],\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n      boolean: /\\b(?:true|false)\\b/,\n      // Includes words reserved for future use\n      keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n      datatype: {\n        pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n        alias: 'symbol'\n      },\n      operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n      punctuation: /[\\[\\]{}().,;]|:+/\n    }\n    var interpolation = [\n      {\n        // Allow for one nested level of braces inside interpolation\n        pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n        lookbehind: true,\n        inside: {\n          'short-variable': {\n            // Negative look-ahead prevent wrong highlighting of functions\n            pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n            lookbehind: true,\n            alias: 'variable',\n            inside: {\n              punctuation: /::/\n            }\n          },\n          delimiter: {\n            pattern: /^\\$/,\n            alias: 'variable'\n          },\n          rest: Prism.languages.puppet\n        }\n      },\n      {\n        pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n        lookbehind: true,\n        alias: 'variable',\n        inside: {\n          punctuation: /::/\n        }\n      }\n    ]\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation\n    Prism.languages.puppet['string'].inside[\n      'double-quoted'\n    ].inside.interpolation = interpolation\n  })(Prism)\n}\n"],"sourceRoot":""}