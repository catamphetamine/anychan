{"version":3,"sources":["webpack:///./node_modules/refractor/lang/erlang.js"],"names":["erlang","Prism","languages","comment","string","pattern","greedy","quoted-function","alias","quoted-atom","boolean","keyword","number","function","variable","lookbehind","operator","atom","punctuation","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,OAAA,CACAG,QAAA,MACAC,OAAA,CACAC,QAAA,wBACAC,QAAA,GAEAC,kBAAA,CACAF,QAAA,8BACAG,MAAA,YAEAC,cAAA,CACAJ,QAAA,wBACAG,MAAA,QAEAE,QAAA,qBACAC,QAAA,0DACAC,OAAA,CACA,SACA,iBACA,0CAEAC,SAAA,sBACAC,SAAA,CAEAT,QAAA,gCACAU,YAAA,GAEAC,SAAA,CACA,+GACA,CAEAX,QAAA,iBACAU,YAAA,GAEA,CAEAV,QAAA,iBACAU,YAAA,IAGAE,KAAA,gBACAC,YAAA,yBA7CAC,EAAAC,QAAApB,EACAA,EAAAqB,YAAA,SACArB,EAAAsB,QAAA","file":"react-syntax-highlighter_languages_refractor_erlang.c30beac8f9bd46850db1.js","sourcesContent":["'use strict'\n\nmodule.exports = erlang\nerlang.displayName = 'erlang'\nerlang.aliases = []\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    boolean: /\\b(?:true|false)\\b/,\n    keyword: /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n    number: [\n      /\\$\\\\?./,\n      /\\d+#[a-z0-9]+/i,\n      /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [\n      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  }\n}\n"],"sourceRoot":""}