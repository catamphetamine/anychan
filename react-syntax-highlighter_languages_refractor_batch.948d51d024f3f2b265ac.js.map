{"version":3,"sources":["webpack:///./node_modules/refractor/lang/batch.js"],"names":["batch","Prism","variable","parameter","pattern","alias","inside","punctuation","string","number","languages","comment","lookbehind","label","command","keyword","operator","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,IACG,SAAAA,GACH,IAAAC,EAAA,qBACAC,EAAA,CACAC,QAAA,+CACAC,MAAA,YACAC,OAAA,CACAC,YAAA,MAGAC,EAAA,UACAC,EAAA,gBACAR,EAAAS,UAAAV,MAAA,CACAW,QAAA,CACA,SACA,CACAP,QAAA,6DACAQ,YAAA,IAGAC,MAAA,CACAT,QAAA,QACAC,MAAA,YAEAS,QAAA,CACA,CAEAV,QAAA,qFACAQ,YAAA,EACAN,OAAA,CACAS,QAAA,wBACAP,SACAL,YACAD,WACAO,SACAF,YAAA,WAGA,CAEAH,QAAA,wMACAQ,YAAA,EACAN,OAAA,CACAS,QAAA,4DACAP,SACAL,YACAD,WACAO,SACAO,SAAA,2CAGA,CAEAZ,QAAA,8BACAQ,YAAA,EACAN,OAAA,CACAS,QAAA,aAGA,CAEAX,QAAA,kGACAQ,YAAA,EACAN,OAAA,CACAS,QAAA,UACAP,SACAL,YACAD,SAAA,CAAAA,EAAA,mCACAO,SACAO,SAAA,kCACAT,YAAA,WAGA,CAEAH,QAAA,+DACAQ,YAAA,EACAN,OAAA,CACAS,QAAA,UACAP,SACAL,YACAU,MAAA,CACAT,QAAA,cACAQ,YAAA,EACAP,MAAA,YAEAH,WACAO,SACAO,SAAA,QAIAA,SAAA,OACAT,YAAA,SA5FG,CA8FAN,GAlGHgB,EAAAC,QAAAlB,EACAA,EAAAmB,YAAA,QACAnB,EAAAoB,QAAA","file":"react-syntax-highlighter_languages_refractor_batch.948d51d024f3f2b265ac.js","sourcesContent":["'use strict'\n\nmodule.exports = batch\nbatch.displayName = 'batch'\nbatch.aliases = []\nfunction batch(Prism) {\n  ;(function(Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    }\n    var string = /\"[^\"]*\"/\n    var number = /(?:\\b|-)\\d+\\b/\n    Prism.languages.batch = {\n      comment: [\n        /^::.*/m,\n        {\n          pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true\n        }\n      ],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [\n        {\n          // FOR command\n          pattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^for\\b|\\b(?:in|do)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // IF command\n          pattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            operator: /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i\n          }\n        },\n        {\n          // ELSE command\n          pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^else\\b/i\n          }\n        },\n        {\n          // SET command\n          pattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^set\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n            number: number,\n            operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // Other commands\n          pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^\\w+\\b/i,\n            string: string,\n            parameter: parameter,\n            label: {\n              pattern: /(^\\s*):\\S+/m,\n              lookbehind: true,\n              alias: 'property'\n            },\n            variable: variable,\n            number: number,\n            operator: /\\^/\n          }\n        }\n      ],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    }\n  })(Prism)\n}\n"],"sourceRoot":""}