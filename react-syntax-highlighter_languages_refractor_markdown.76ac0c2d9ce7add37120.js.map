{"version":3,"sources":["webpack:///./node_modules/refractor/lang/markdown.js"],"names":["markdown","Prism","languages","extend","insertBefore","blockquote","pattern","alias","code","greedy","inside","code-block","lookbehind","code-language","punctuation","title","hr","list","url-reference","variable","string","bold","italic","strike","url","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","content","codeBlock","trim","split","toLowerCase","push","classes","cls","match","exec","grammar","value","replace","highlight","md","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,SAAAC,EAAAC,UAAAC,OAAA,aACAF,EAAAC,UAAAE,aAAA,qBACAC,WAAA,CAEAC,QAAA,kBACAC,MAAA,eAEAC,KAAA,CACA,CAEAF,QAAA,kBACAC,MAAA,WAEA,CAGAD,QAAA,oBACAC,MAAA,WAEA,CAIAD,QAAA,qBACAG,QAAA,EACAC,OAAA,CACAC,aAAA,CACAL,QAAA,qDACAM,YAAA,GAEAC,gBAAA,CACAP,QAAA,WACAM,YAAA,GAEAE,YAAA,SAIAC,MAAA,CACA,CAKAT,QAAA,8BACAC,MAAA,YACAG,OAAA,CACAI,YAAA,cAGA,CAGAR,QAAA,cACAM,YAAA,EACAL,MAAA,YACAG,OAAA,CACAI,YAAA,aAIAE,GAAA,CAKAV,QAAA,wCACAM,YAAA,EACAL,MAAA,eAEAU,KAAA,CAKAX,QAAA,mCACAM,YAAA,EACAL,MAAA,eAEAW,gBAAA,CAKAZ,QAAA,qHACAI,OAAA,CACAS,SAAA,CACAb,QAAA,gBACAM,YAAA,GAEAQ,OAAA,+DACAN,YAAA,kBAEAP,MAAA,OAEAc,KAAA,CAIAf,QAAA,uDACAM,YAAA,EACAH,QAAA,EACAC,OAAA,CACAI,YAAA,wBAGAQ,OAAA,CAIAhB,QAAA,oDACAM,YAAA,EACAH,QAAA,EACAC,OAAA,CACAI,YAAA,gBAGAS,OAAA,CAIAjB,QAAA,mDACAM,YAAA,EACAH,QAAA,EACAC,OAAA,CACAI,YAAA,cAGAU,IAAA,CAGAlB,QAAA,yEACAI,OAAA,CACAS,SAAA,CACAb,QAAA,sBACAM,YAAA,GAEAQ,OAAA,CACAd,QAAA,gCAKG,2BAAAmB,QAAA,SAAAC,GACE,iCAAAD,QAAA,SAAAf,GACLgB,IAAAhB,IACAT,EAAAC,UAAAF,SAAA0B,GAAAhB,UACAT,EAAAC,UAAAF,SAAAU,QAIAT,EAAA0B,MAAAC,IAAA,0BAAAC,GACA,aAAAA,EAAAC,UAAA,OAAAD,EAAAC,UAGA,SAAAC,EAAAC,GACA,GAAAA,GAAA,iBAAAA,EAGA,QAAAC,EAAA,EAAAC,EAAAF,EAAAG,OAAwCF,EAAAC,EAAOD,IAAA,CAC/C,IAAAP,EAAAM,EAAAC,GACA,YAAAP,EAAAU,KAAA,CAIA,IAAAC,EAAAX,EAAAY,QAAA,GACAC,EAAAb,EAAAY,QAAA,GACA,GACAD,GACAE,GACA,kBAAAF,EAAAD,MACA,eAAAG,EAAAH,MACA,iBAAAC,EAAAC,QACA,CAEA,IAAA/B,EACA,YACA8B,EAAAC,QACAE,OACAC,MAAA,UACAC,cAEAH,EAAAhC,MAEW,iBAAAgC,EAAAhC,MACXgC,EAAAhC,MAAA,CAAAgC,EAAAhC,SAEAgC,EAAAhC,MAAAoC,KAAApC,GAJAgC,EAAAhC,MAAA,CAAAA,SArBAwB,EAAAL,EAAAY,UA8BAP,CAAAF,EAAAG,UAEA/B,EAAA0B,MAAAC,IAAA,gBAAAC,GACA,kBAAAA,EAAAO,KAAA,CAIA,IADA,IAAAC,EAAA,GACAJ,EAAA,EAAAC,EAAAL,EAAAe,QAAAT,OAA2CF,EAAAC,EAAOD,IAAA,CAClD,IAAAY,EAAAhB,EAAAe,QAAAX,GACAa,EAAA,gBAAAC,KAAAF,GACA,GAAAC,EAAA,CACAT,EAAAS,EAAA,GACA,OAGA,IAAAE,EAAA/C,EAAAC,UAAAmC,GACA,GAAAW,EAAA,CAIA,IAAAxC,EAAAqB,EAAAS,QAAAW,MAAAC,QAAA,QAA8C,KAAAA,QAAA,SAAuB,KACrErB,EAAAS,QAAArC,EAAAkD,UAAA3C,EAAAwC,EAAAX,OAEApC,EAAAC,UAAAkD,GAAAnD,EAAAC,UAAAF,SA3NAqD,EAAAC,QAAAtD,EACAA,EAAAuD,YAAA,WACAvD,EAAAwD,QAAA","file":"react-syntax-highlighter_languages_refractor_markdown.76ac0c2d9ce7add37120.js","sourcesContent":["'use strict'\n\nmodule.exports = markdown\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\nfunction markdown(Prism) {\n  Prism.languages.markdown = Prism.languages.extend('markup', {})\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    blockquote: {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    code: [\n      {\n        // Prefixed by 4 spaces or 1 tab\n        pattern: /^(?: {4}|\\t).+/m,\n        alias: 'keyword'\n      },\n      {\n        // `code`\n        // ``code``\n        pattern: /``.+?``|`[^`\\n]+`/,\n        alias: 'keyword'\n      },\n      {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          punctuation: /```/\n        }\n      }\n    ],\n    title: [\n      {\n        // title 1\n        // =======\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      },\n      {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#+.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }\n    ],\n    hr: {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    list: {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        variable: {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        punctuation: /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    bold: {\n      // **strong**\n      // __strong__\n      // Allow only one line break\n      pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n      }\n    },\n    italic: {\n      // *em*\n      // _em_\n      // Allow only one line break\n      pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        punctuation: /^[*_]|[*_]$/\n      }\n    },\n    strike: {\n      // ~~strike through~~\n      // ~strike~\n      // Allow only one line break\n      pattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        punctuation: /^~~?|~~?$/\n      }\n    },\n    url: {\n      // [example](http://example.com \"Optional title\")\n      // [example] [id]\n      pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n      inside: {\n        variable: {\n          pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        string: {\n          pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n        }\n      }\n    }\n  })\n  ;['bold', 'italic', 'strike'].forEach(function(token) {\n    ;['url', 'bold', 'italic', 'strike'].forEach(function(inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside[inside] =\n          Prism.languages.markdown[inside]\n      }\n    })\n  })\n  Prism.hooks.add('after-tokenize', function(env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return\n    }\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return\n      }\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i]\n        if (token.type !== 'code') {\n          walkTokens(token.content)\n          continue\n        }\n        var codeLang = token.content[1]\n        var codeBlock = token.content[3]\n        if (\n          codeLang &&\n          codeBlock &&\n          codeLang.type === 'code-language' &&\n          codeBlock.type === 'code-block' &&\n          typeof codeLang.content === 'string'\n        ) {\n          // this might be a language that Prism does not support\n          var alias =\n            'language-' +\n            codeLang.content\n              .trim()\n              .split(/\\s+/)[0]\n              .toLowerCase()\n          // add alias\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias]\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias]\n          } else {\n            codeBlock.alias.push(alias)\n          }\n        }\n      }\n    }\n    walkTokens(env.tokens)\n  })\n  Prism.hooks.add('wrap', function(env) {\n    if (env.type !== 'code-block') {\n      return\n    }\n    var codeLang = ''\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i]\n      var match = /language-(.+)/.exec(cls)\n      if (match) {\n        codeLang = match[1]\n        break\n      }\n    }\n    var grammar = Prism.languages[codeLang]\n    if (!grammar) {\n      return\n    }\n    // reverse Prism.util.encode\n    var code = env.content.value.replace(/&lt;/g, '<').replace(/&amp;/g, '&')\n    env.content = Prism.highlight(code, grammar, codeLang)\n  })\n  Prism.languages.md = Prism.languages.markdown\n}\n"],"sourceRoot":""}