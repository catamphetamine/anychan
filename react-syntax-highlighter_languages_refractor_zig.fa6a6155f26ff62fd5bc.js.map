{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/zig.js"],"names":["zig","Prism","literal","str","keyword","IDENTIFIER","source","ALIGN","TYPE","replace","languages","comment","pattern","alias","string","lookbehind","greedy","builtin","label","RegExp","inside","function","number","boolean","operator","punctuation","forEach","obj","module","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAIC,IACV,SAAWA,GACV,SAASC,EAAQC,GACf,OAAO,WACL,OAAOA,GAGX,IAAIC,EAAU,sVACVC,EAAa,SAAWD,EAAQE,OAAS,kBACzCC,EAAQ,oCAAoCD,OAS5CE,EACF,sBATmB,0GAA0GF,OAAOG,QACpI,WACAP,EAAQK,IAOiC,SALzB,2DAA2DD,OAAOG,QAClF,QACAP,EAAQG,IAG0D,KAiBpEJ,EAAMS,UAAUV,IAAM,CACpBW,QAAS,CACP,CACEC,QAAS,UACTC,MAAO,eAET,WAEFC,OAAQ,CACN,CAEEF,QAAS,oCACTG,YAAY,EACZC,QAAQ,GAEV,CAEEJ,QAAS,iDACTG,YAAY,EACZC,QAAQ,GAEV,CAEEJ,QAAS,wEACTG,YAAY,EACZC,QAAQ,IAGZC,QAAS,wBACTC,MAAO,CACLN,QAAS,4EACTG,YAAY,GAEd,aAAc,CAEZ,8EACA,CAIEH,QAASO,OACP,0EAA0Eb,OACvEG,QAAQ,UAAWP,EAAQM,IAC3BC,QAAQ,WAAYP,EAAQK,KAEjCQ,YAAY,EACZK,OAAQ,MAEV,CAEER,QAASO,OACP,uCAAuCb,OACpCG,QAAQ,UAAWP,EAAQM,IAC3BC,QAAQ,WAAYP,EAAQK,KAEjCQ,YAAY,EACZK,OAAQ,OAGZ,gBAAiB,CACfR,QAAS,oKACTC,MAAO,WAETT,QAASA,EACTiB,SAAU,uBACVC,OAAQ,2GACRC,QAAS,qBACTC,SAAU,6EACVC,YAAa,iBAEfxB,EAAMS,UAAUV,IAAI,cAAc0B,SAAQ,SAAUC,GAC/B,OAAfA,EAAIP,SACNO,EAAIP,OAASnB,EAAMS,UAAUV,QA3GlC,CA8GEC,GAlHL2B,EAAOC,QAAU7B,EACjBA,EAAI8B,YAAc,MAClB9B,EAAI+B,QAAU","file":"react-syntax-highlighter_languages_refractor_zig.fa6a6155f26ff62fd5bc.js","sourcesContent":["'use strict'\n\nmodule.exports = zig\nzig.displayName = 'zig'\nzig.aliases = []\nfunction zig(Prism) {\n  ;(function (Prism) {\n    function literal(str) {\n      return function () {\n        return str\n      }\n    }\n    var keyword = /\\b(?:align|allowzero|and|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/\n    var IDENTIFIER = '\\\\b(?!' + keyword.source + ')(?!\\\\d)\\\\w+\\\\b'\n    var ALIGN = /align\\s*\\((?:[^()]|\\([^()]*\\))*\\)/.source\n    var PREFIX_TYPE_OP = /(?:\\?|\\bpromise->|(?:\\[[^[\\]]*\\]|\\*(?!\\*)|\\*\\*)(?:\\s*<ALIGN>|\\s*const\\b|\\s*volatile\\b|\\s*allowzero\\b)*)/.source.replace(\n      /<ALIGN>/g,\n      literal(ALIGN)\n    )\n    var SUFFIX_EXPR = /(?:\\bpromise\\b|(?:\\berror\\.)?<ID>(?:\\.<ID>)*(?!\\s+<ID>))/.source.replace(\n      /<ID>/g,\n      literal(IDENTIFIER)\n    )\n    var TYPE =\n      '(?!\\\\s)(?:!?\\\\s*(?:' + PREFIX_TYPE_OP + '\\\\s*)*' + SUFFIX_EXPR + ')+'\n    /*\n     * A simplified grammar for Zig compile time type literals:\n     *\n     * TypeExpr = ( \"!\"? PREFIX_TYPE_OP* SUFFIX_EXPR )+\n     *\n     * SUFFIX_EXPR = ( \\b \"promise\" \\b | ( \\b \"error\" \".\" )? IDENTIFIER ( \".\" IDENTIFIER )* (?! \\s+ IDENTIFIER ) )\n     *\n     * PREFIX_TYPE_OP = \"?\"\n     *                | \\b \"promise\" \"->\"\n     *                | ( \"[\" [^\\[\\]]* \"]\" | \"*\" | \"**\" ) ( ALIGN | \"const\" \\b | \"volatile\" \\b | \"allowzero\" \\b )*\n     *\n     * ALIGN = \"align\" \"(\" ( [^()] | \"(\" [^()]* \")\" )* \")\"\n     *\n     * IDENTIFIER = \\b (?! KEYWORD ) [a-zA-Z_] \\w* \\b\n     *\n     */\n    Prism.languages.zig = {\n      comment: [\n        {\n          pattern: /\\/{3}.*/,\n          alias: 'doc-comment'\n        },\n        /\\/{2}.*/\n      ],\n      string: [\n        {\n          // \"string\" and c\"string\"\n          pattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          // multiline strings and c-strings\n          pattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          // characters 'a', '\\n', '\\xFF', '\\u{10FFFF}'\n          pattern: /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      builtin: /\\B@(?!\\d)\\w+(?=\\s*\\()/,\n      label: {\n        pattern: /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\n        lookbehind: true\n      },\n      'class-name': [\n        // const Foo = struct {};\n        /\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,\n        {\n          // const x: i32 = 9;\n          // var x: Bar;\n          // fn foo(x: bool, y: f32) void {}\n          pattern: RegExp(\n            /(:\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?[=;,)])|<TYPE>(?=\\s*(?:<ALIGN>\\s*)?\\{)/.source\n              .replace(/<TYPE>/g, literal(TYPE))\n              .replace(/<ALIGN>/g, literal(ALIGN))\n          ),\n          lookbehind: true,\n          inside: null // see below\n        },\n        {\n          // extern fn foo(x: f64) f64; (optional alignment)\n          pattern: RegExp(\n            /(\\)\\s*)<TYPE>(?=\\s*(?:<ALIGN>\\s*)?;)/.source\n              .replace(/<TYPE>/g, literal(TYPE))\n              .replace(/<ALIGN>/g, literal(ALIGN))\n          ),\n          lookbehind: true,\n          inside: null // see below\n        }\n      ],\n      'builtin-types': {\n        pattern: /\\b(?:anyerror|bool|c_u?(?:short|int|long|longlong)|c_longdouble|c_void|comptime_(?:float|int)|[iu](?:8|16|32|64|128|size)|f(?:16|32|64|128)|noreturn|type|void)\\b/,\n        alias: 'keyword'\n      },\n      keyword: keyword,\n      function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n      number: /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+\\.?[a-fA-F\\d]*(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+\\.?\\d*(?:[eE][+-]?\\d+)?)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      operator: /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\n      punctuation: /[.:,;(){}[\\]]/\n    }\n    Prism.languages.zig['class-name'].forEach(function (obj) {\n      if (obj.inside === null) {\n        obj.inside = Prism.languages.zig\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}