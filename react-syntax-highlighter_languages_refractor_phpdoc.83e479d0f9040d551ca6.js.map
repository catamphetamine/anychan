{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/javadoclike.js","webpack://captchan/./node_modules/refractor/lang/markup-templating.js","webpack://captchan/./node_modules/refractor/lang/php.js","webpack://captchan/./node_modules/refractor/lang/phpdoc.js"],"names":["javadoclike","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","Object","defineProperty","value","docLanguage","forEach","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","defineProperties","buildPlaceholders","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","indexOf","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","refractorMarkupTemplating","php","register","extend","boolean","constant","comment","delimiter","variable","package","property","string_interpolation","greedy","interpolation","hooks","add","test","refractorPhp","refractorJavadoclike","phpdoc","typeExpression","source"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_phpdoc.83e479d0f9040d551ca6.js","sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;(function (Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    })\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    })\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }) // Must be defined after the function pattern\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    })\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    }) // The different types of PHP strings \"replace\" the C-like standard string\n    delete Prism.languages.php['string']\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorPhp = require('./php.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = phpdoc\nphpdoc.displayName = 'phpdoc'\nphpdoc.aliases = []\nfunction phpdoc(Prism) {\n  Prism.register(refractorPhp)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var typeExpression = /(?:\\b[a-zA-Z]\\w*|[|\\\\[\\]])+/.source\n    Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        pattern: RegExp(\n          '(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' +\n            typeExpression +\n            '\\\\s+)?)\\\\$\\\\w+'\n        ),\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('phpdoc', 'keyword', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            '(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' +\n              typeExpression\n          ),\n          lookbehind: true,\n          inside: {\n            keyword: /\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,\n            punctuation: /[|\\\\[\\]()]/\n          }\n        }\n      ]\n    })\n    Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc)\n  })(Prism)\n}\n"],"sourceRoot":""}