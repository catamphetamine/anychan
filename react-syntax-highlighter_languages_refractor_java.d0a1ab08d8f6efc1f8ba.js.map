{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/java.js"],"names":["java","Prism","keywords","className","languages","extend","keyword","function","clike","pattern","lookbehind","number","operator","insertBefore","greedy","alias","annotation","namespace","RegExp","source","replace","inside","punctuation","generics","module","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAKC,IACX,SAAWA,GACV,IAAIC,EAAW,ubACXC,EAAY,4BAChBF,EAAMG,UAAUJ,KAAOC,EAAMG,UAAUC,OAAO,QAAS,CACrD,aAAc,CACZF,EAEA,mCAEFG,QAASJ,EACTK,SAAU,CACRN,EAAMG,UAAUI,MAAMD,SACtB,CACEE,QAAS,kBACTC,YAAY,IAGhBC,OAAQ,mHACRC,SAAU,CACRH,QAAS,wEACTC,YAAY,KAGhBT,EAAMG,UAAUS,aAAa,OAAQ,SAAU,CAC7C,uBAAwB,CAEtBJ,QAAS,iDACTK,QAAQ,EACRC,MAAO,YAGXd,EAAMG,UAAUS,aAAa,OAAQ,aAAc,CACjDG,WAAY,CACVD,MAAO,cACPN,QAAS,eACTC,YAAY,GAEdO,UAAW,CACTR,QAASS,OACP,qJAAqJC,OAAOC,QAC1J,cACA,WACE,OAAOlB,EAASiB,WAItBT,YAAY,EACZW,OAAQ,CACNC,YAAa,OAGjBC,SAAU,CACRd,QAAS,sEACTY,OAAQ,CACN,aAAclB,EACdG,QAASJ,EACToB,YAAa,YACbV,SAAU,YAzDjB,CA6DEX,GAjELuB,EAAOC,QAAUzB,EACjBA,EAAK0B,YAAc,OACnB1B,EAAK2B,QAAU","file":"react-syntax-highlighter_languages_refractor_java.d0a1ab08d8f6efc1f8ba.js","sourcesContent":["'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|null|open|opens|package|private|protected|provides|public|record|requires|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // based on the java naming conventions\n    var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/\n    Prism.languages.java = Prism.languages.extend('clike', {\n      'class-name': [\n        className, // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(\\:\\:)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        alias: 'punctuation',\n        pattern: /(^|[^.])@\\w+/,\n        lookbehind: true\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}