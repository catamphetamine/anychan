{"version":3,"sources":["webpack:///./node_modules/refractor/lang/parser.js"],"names":["parser","Prism","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","parser-comment","expression","greedy","string","boolean","number","operator","parser-punctuation","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,IACG,SAAAA,GACH,IAAAD,EAAAC,EAAAC,UAAAF,OAAAC,EAAAC,UAAAC,OAAA,UACAC,QAAA,CACAC,QAAA,+GACAC,YAAA,GAEAC,SAAA,CACAF,QAAA,4DACAC,YAAA,EACAE,OAAA,CACAC,YAAA,UAGAC,SAAA,CACAL,QAAA,iDACAC,YAAA,EACAE,OAAA,CACAJ,QAAA,CACAC,QAAA,oBACAC,YAAA,GAEAG,YAAA,UAGAE,OAAA,CACAN,QAAA,qCACAO,MAAA,WAEAH,YAAA,gBAEAT,EAAAC,EAAAC,UAAAW,aAAA,oBACAC,iBAAA,CACAT,QAAA,UACAC,YAAA,EACAM,MAAA,WAEAG,WAAA,CAEAV,QAAA,uDACAW,QAAA,EACAV,YAAA,EACAE,OAAA,CACAS,OAAA,CACAZ,QAAA,2CACAC,YAAA,GAEAF,QAAAJ,EAAAI,QACAG,SAAAP,EAAAO,SACAG,SAAAV,EAAAU,SACAQ,QAAA,qBACAC,OAAA,8CACAR,OAAAX,EAAAW,OACAS,SAAA,iGACAX,YAAAT,EAAAS,gBAIAT,EAAAC,EAAAC,UAAAW,aACA,SACA,cACA,CACAE,WAAAf,EAAAe,WACAX,QAAAJ,EAAAI,QACAG,SAAAP,EAAAO,SACAG,SAAAV,EAAAU,SACAC,OAAAX,EAAAW,OACAU,qBAAA,CACAhB,QAAAL,EAAAS,YACAG,MAAA,gBAGAZ,EAAA,IAAAQ,OAAA,eAvEG,CAyEAP,GA7EHqB,EAAAC,QAAAvB,EACAA,EAAAwB,YAAA,SACAxB,EAAAyB,QAAA","file":"react-syntax-highlighter_languages_refractor_parser.ec896e2274f7cb9d2378.js","sourcesContent":["'use strict'\n\nmodule.exports = parser\nparser.displayName = 'parser'\nparser.aliases = []\nfunction parser(Prism) {\n  ;(function(Prism) {\n    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      function: {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    }))\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          function: parser.function,\n          boolean: /\\b(?:true|false)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    })\n    parser = Prism.languages.insertBefore(\n      'inside',\n      'punctuation',\n      {\n        expression: parser.expression,\n        keyword: parser.keyword,\n        variable: parser.variable,\n        function: parser.function,\n        escape: parser.escape,\n        'parser-punctuation': {\n          pattern: parser.punctuation,\n          alias: 'punctuation'\n        }\n      },\n      parser['tag'].inside['attr-value']\n    )\n  })(Prism)\n}\n"],"sourceRoot":""}