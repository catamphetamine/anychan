{"version":3,"sources":["webpack:///./node_modules/refractor/lang/markup-templating.js","webpack:///./node_modules/refractor/lang/django.js"],"names":["markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","module","exports","displayName","aliases","refractorMarkupTemplating","__webpack_require__","django","register","comment","tag","pattern","lookbehind","alias","delimiter","string","greedy","filter","test","function","keyword","operator","number","boolean","variable","punctuation","hooks","add","jinja2"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_django.84061a132a3b816a3615.js","sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function(Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function(match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder\n            // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i\n            // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          })\n          // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          }\n          // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = django\ndjango.displayName = 'django'\ndjango.aliases = ['jinja2']\nfunction django(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n  // Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n  ;(function(Prism) {\n    Prism.languages.django = {\n      comment: /^{#[\\s\\S]*?#}$/,\n      tag: {\n        pattern: /(^{%[+-]?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      delimiter: {\n        pattern: /^{[{%][+-]?|[+-]?[}%]}$/,\n        alias: 'punctuation'\n      },\n      string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      },\n      filter: {\n        pattern: /(\\|)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      test: {\n        pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b[a-z_]\\w+(?=\\s*\\()/i,\n      keyword: /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n      operator: /[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      boolean: /[Tt]rue|[Ff]alse|[Nn]one/,\n      variable: /\\b\\w+?\\b/,\n      punctuation: /[{}[\\](),.:;]/\n    }\n    var pattern = /{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g\n    var markupTemplating = Prism.languages['markup-templating']\n    Prism.hooks.add('before-tokenize', function(env) {\n      markupTemplating.buildPlaceholders(env, 'django', pattern)\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      markupTemplating.tokenizePlaceholders(env, 'django')\n    })\n    // Add an Jinja2 alias\n    Prism.languages.jinja2 = Prism.languages.django\n    Prism.hooks.add('before-tokenize', function(env) {\n      markupTemplating.buildPlaceholders(env, 'jinja2', pattern)\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      markupTemplating.tokenizePlaceholders(env, 'jinja2')\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}