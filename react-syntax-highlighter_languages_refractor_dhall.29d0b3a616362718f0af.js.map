{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/dhall.js"],"names":["dhall","Prism","languages","comment","string","pattern","greedy","inside","interpolation","expression","lookbehind","alias","punctuation","label","url","env","function","operator","variable","hash","number","keyword","builtin","boolean","module","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAMC,GAGbA,EAAMC,UAAUF,MAAQ,CAItBG,QAAS,yEACTC,OAAQ,CACNC,QAAS,4DACTC,QAAQ,EACRC,OAAQ,CACNC,cAAe,CACbH,QAAS,eACTE,OAAQ,CACNE,WAAY,CACVJ,QAAS,wBACTK,YAAY,EACZC,MAAO,iBACPJ,OAAQ,MAEVK,YAAa,cAKrBC,MAAO,CACLR,QAAS,UACTC,QAAQ,GAEVQ,IAAK,CAEHT,QAAS,yFACTC,QAAQ,GAEVS,IAAK,CAEHV,QAAS,yCACTC,QAAQ,EACRC,OAAQ,CACNS,SAAU,OACVC,SAAU,KACVC,SAAU,YAGdC,KAAM,CAEJd,QAAS,4BACTE,OAAQ,CACNS,SAAU,SACVC,SAAU,IACVG,OAAQ,mBAIZC,QAAS,qFACTC,QAAS,oBACTC,QAAS,qBACTH,OAAQ,gFACRH,SAAU,qGACVL,YAAa,qBAEb,aAAc,gBAEhBX,EAAMC,UAAUF,MAAMI,OAAOG,OAAOC,cAAcD,OAAOE,WAAWF,OAClEN,EAAMC,UAAUF,MApEpBwB,EAAOC,QAAUzB,EACjBA,EAAM0B,YAAc,QACpB1B,EAAM2B,QAAU","file":"react-syntax-highlighter_languages_refractor_dhall.29d0b3a616362718f0af.js","sourcesContent":["'use strict'\n\nmodule.exports = dhall\ndhall.displayName = 'dhall'\ndhall.aliases = []\nfunction dhall(Prism) {\n  // ABNF grammar:\n  // https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\n  Prism.languages.dhall = {\n    // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n    // The multi-line pattern is essentially this:\n    //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n    comment: /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$\\{[^{}]*\\}/,\n          inside: {\n            expression: {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              alias: 'language-dhall',\n              inside: null // see blow\n            },\n            punctuation: /\\$\\{|\\}/\n          }\n        }\n      }\n    },\n    label: {\n      pattern: /`[^`]*`/,\n      greedy: true\n    },\n    url: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n      pattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n      greedy: true\n    },\n    env: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n      pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n      greedy: true,\n      inside: {\n        function: /^env/,\n        operator: /^:/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    hash: {\n      // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n      pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n      inside: {\n        function: /sha256/,\n        operator: /:/,\n        number: /[\\da-fA-F]{64}/\n      }\n    },\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n    keyword: /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n    builtin: /\\b(?:Some|None)\\b/,\n    boolean: /\\b(?:False|True)\\b/,\n    number: /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n    operator: /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||[!=]=|===|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n    punctuation: /\\.\\.|[{}\\[\\](),./]/,\n    // we'll just assume that every capital word left is a type name\n    'class-name': /\\b[A-Z]\\w*\\b/\n  }\n  Prism.languages.dhall.string.inside.interpolation.inside.expression.inside =\n    Prism.languages.dhall\n}\n"],"sourceRoot":""}