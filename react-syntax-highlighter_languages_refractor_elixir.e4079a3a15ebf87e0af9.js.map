{"version":3,"sources":["webpack:///./node_modules/refractor/lang/elixir.js"],"names":["elixir","Prism","languages","comment","pattern","lookbehind","regex","greedy","string","inside","atom","alias","attr-name","capture","argument","attribute","number","keyword","boolean","operator","punctuation","forEach","o","interpolation","delimiter","rest","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,OAAA,CACAG,QAAA,CACAC,QAAA,OACAC,YAAA,GAGAC,MAAA,CACAF,QAAA,6LACAG,QAAA,GAEAC,OAAA,CACA,CAEAJ,QAAA,wMACAG,QAAA,EACAE,OAAA,IAIA,CACAL,QAAA,sBACAG,QAAA,EACAE,OAAA,IAIA,CAEAL,QAAA,gDACAG,QAAA,EACAE,OAAA,KAKAC,KAAA,CAEAN,QAAA,eACAC,YAAA,EACAM,MAAA,UAGAC,YAAA,YACAC,QAAA,CAEAT,QAAA,yCACAC,YAAA,EACAM,MAAA,YAEAG,SAAA,CAEAV,QAAA,eACAC,YAAA,EACAM,MAAA,YAEAI,UAAA,CACAX,QAAA,OACAO,MAAA,YAEAK,OAAA,kEACAC,QAAA,0KACAC,QAAA,yBACAC,SAAA,CACA,2FACA,CAEAf,QAAA,eACAC,YAAA,GAEA,CAEAD,QAAA,eACAC,YAAA,IAGAe,YAAA,uBAEAnB,EAAAC,UAAAF,OAAAQ,OAAAa,QAAA,SAAAC,GACAA,EAAAb,OAAA,CACAc,cAAA,CACAnB,QAAA,aACAK,OAAA,CACAe,UAAA,CACApB,QAAA,WACAO,MAAA,eAEAc,KAAAxB,EAAAC,UAAAF,YA1FA0B,EAAAC,QAAA3B,EACAA,EAAA4B,YAAA,SACA5B,EAAA6B,QAAA","file":"react-syntax-highlighter_languages_refractor_elixir.e4079a3a15ebf87e0af9.js","sourcesContent":["'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    comment: {\n      pattern: /#.*/m,\n      lookbehind: true\n    },\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\w+:(?!:)/,\n    capture: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n    boolean: /\\b(?:true|false|nil)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function(o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n"],"sourceRoot":""}