{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/regex.js"],"names":["regex","Prism","specialEscape","pattern","alias","escape","rangeChar","source","range","RegExp","groupName","lookbehind","languages","charset","inside","charclass","backreference","anchor","group","quantifier","alternation","forEach","lang","grammar","module","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAMC,IACZ,SAAWA,GACV,IAAIC,EAAgB,CAClBC,QAAS,uBACTC,MAAO,UAELC,EAAS,6FASTC,EAAY,eAAiBD,EAAOE,OAAS,IAC7CC,EAAQC,OAAOH,EAAY,IAAMA,GACjCI,EAAY,CACdP,QAAS,wBACTQ,YAAY,EACZP,MAAO,YAETH,EAAMW,UAAUZ,MAAQ,CACtBa,QAAS,CACPV,QAAS,kDACTQ,YAAY,EACZG,OAAQ,CACN,mBAAoB,CAClBX,QAAS,UACTQ,YAAY,EACZP,MAAO,YAET,sBAAuB,CACrBD,QAAS,UACTC,MAAO,eAETI,MAAO,CACLL,QAASK,EACTM,OAAQ,CACNT,OAAQA,EACR,oBAAqB,CACnBF,QAAS,IACTC,MAAO,cAIb,iBAAkBF,EAClBa,UApCoB,CACxBZ,QAAS,uBACTC,MAAO,cAmCHC,OAAQA,IAGZ,iBAAkBH,EAClBa,UA7Cc,CACdZ,QAAS,0BACTC,MAAO,cA4CPY,cAAe,CACb,CAEEb,QAAS,2BACTC,MAAO,WAET,CACED,QAAS,eACTC,MAAO,UACPU,OAAQ,CACN,aAAcJ,KAIpBO,OAAQ,CACNd,QAAS,kBACTC,MAAO,YAETC,OAAQA,EACRa,MAAO,CACL,CAIEf,QAAS,8EACTC,MAAO,cACPU,OAAQ,CACN,aAAcJ,IAGlB,CACEP,QAAS,KACTC,MAAO,gBAGXe,WAAY,CACVhB,QAAS,kCACTC,MAAO,UAETgB,YAAa,CACXjB,QAAS,KACTC,MAAO,YAGV,CACC,eACA,cACA,OACA,aACA,aACA,QACAiB,SAAQ,SAAUC,GAClB,IAAIC,EAAUtB,EAAMW,UAAUU,GAC1BC,IACFA,EAAe,MAAET,OAAS,CACxB,iBAAkB,CAChBX,QAAS,6BACTQ,YAAY,EACZG,OAAQb,EAAMW,UAAUZ,OAE1B,cAAe,WACf,kBAAmB,eAjH1B,CAqHEC,GAzHLuB,EAAOC,QAAUzB,EACjBA,EAAM0B,YAAc,QACpB1B,EAAM2B,QAAU","file":"react-syntax-highlighter_languages_refractor_regex.75e18c0747d1d8a517ab.js","sourcesContent":["'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/\n    var charClass = {\n      pattern: /\\.|\\\\[wsd]|\\\\p{[^{}]+}/i,\n      alias: 'class-name'\n    }\n    var charClassWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p{[^{}]+}/i,\n      alias: 'class-name'\n    }\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'charset-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClassWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: [\n        {\n          // a backreference which is not an octal escape\n          pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n          alias: 'keyword'\n        },\n        {\n          pattern: /\\\\k<[^<>']+>/,\n          alias: 'keyword',\n          inside: {\n            'group-name': groupName\n          }\n        }\n      ],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          alias: 'punctuation',\n          inside: {\n            'group-name': groupName\n          }\n        },\n        {\n          pattern: /\\)/,\n          alias: 'punctuation'\n        }\n      ],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{(?:\\d+,?\\d*)\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    }\n    ;[\n      'actionscript',\n      'coffescript',\n      'flow',\n      'javascript',\n      'typescript',\n      'vala'\n    ].forEach(function (lang) {\n      var grammar = Prism.languages[lang]\n      if (grammar) {\n        grammar['regex'].inside = {\n          'language-regex': {\n            pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/i,\n            lookbehind: true,\n            inside: Prism.languages.regex\n          },\n          'regex-flags': /[a-z]+$/i,\n          'regex-delimiter': /^\\/|\\/$/\n        }\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}