{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/typescript.js"],"names":["typescript","Prism","languages","extend","pattern","lookbehind","greedy","inside","keyword","builtin","typeInside","insertBefore","function","generic","alias","ts","module","exports","displayName","aliases"],"mappings":"8FAKA,SAASA,EAAWC,IACjB,SAAWA,GACVA,EAAMC,UAAUF,WAAaC,EAAMC,UAAUC,OAAO,aAAc,CAChE,aAAc,CACZC,QAAS,+JACTC,YAAY,EACZC,QAAQ,EACRC,OAAQ,MAGVC,QAAS,6ZACTC,QAAS,iGAEJR,EAAMC,UAAUF,WAAsB,UAC7C,IAAIU,EAAaT,EAAMC,UAAUC,OAAO,aAAc,WAC/CO,EAAW,cAClBT,EAAMC,UAAUF,WAAW,cAAcO,OAASG,EAClDT,EAAMC,UAAUS,aAAa,aAAc,WAAY,CACrD,mBAAoB,CAElBP,QAAS,yFACTE,QAAQ,EACRC,OAAQ,CACNK,SAAU,4CACVC,QAAS,CACPT,QAAS,WAETU,MAAO,aACPP,OAAQG,OAKhBT,EAAMC,UAAUa,GAAKd,EAAMC,UAAUF,WAhCtC,CAiCEC,GArCLe,EAAOC,QAAUjB,EACjBA,EAAWkB,YAAc,aACzBlB,EAAWmB,QAAU,CAAC","file":"react-syntax-highlighter_languages_refractor_typescript.5eea73df491e3691e001.js","sourcesContent":["'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n      keyword: /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n      builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n    }) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n"],"sourceRoot":""}