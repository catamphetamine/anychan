{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/rust.js"],"names":["rust","Prism","multilineComment","source","i","replace","languages","comment","pattern","RegExp","lookbehind","greedy","string","char","alias","attribute","inside","rest","variable","punctuation","keyword","function","macro","constant","namespace","number","boolean","operator","module","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAKC,IACX,SAAWA,GAEV,IADA,IAAIC,EAAmB,8CAA8CC,OAC5DC,EAAI,EAAGA,EAAI,EAAGA,IAErBF,EAAmBA,EAAiBG,QAAQ,WAAW,WACrD,OAAOH,KAGXA,EAAmBA,EAAiBG,QAAQ,WAAW,WACrD,MAAO,UAAUF,UAEnBF,EAAMK,UAAUN,KAAO,CACrBO,QAAS,CACP,CACEC,QAASC,OAAO,YAAYN,OAASD,GACrCQ,YAAY,EACZC,QAAQ,GAEV,CACEH,QAAS,mBACTE,YAAY,EACZC,QAAQ,IAGZC,OAAQ,CACNJ,QAAS,wDACTG,QAAQ,GAEVE,KAAM,CACJL,QAAS,wEACTG,QAAQ,EACRG,MAAO,UAETC,UAAW,CACTP,QAAS,8CACTG,QAAQ,EACRG,MAAO,YACPE,OAAQ,CACNJ,OAAQ,OAIZ,iBAAkB,CAChBJ,QAAS,2DACTE,YAAY,EACZC,QAAQ,EACRK,OAAQ,CACN,sBAAuB,CACrBR,QAAS,UACTM,MAAO,eAETG,KAAM,OAGV,sBAAuB,CACrBT,QAAS,OACTM,MAAO,UAET,qBAAsB,CACpBN,QAAS,iBACTE,YAAY,EACZI,MAAO,eAETI,SAAU,QACV,sBAAuB,CACrBV,QAAS,eACTE,YAAY,EACZI,MAAO,YAET,kBAAmB,CACjBN,QAAS,kCACTE,YAAY,EACZI,MAAO,cAET,qBAAsB,CACpB,CACEN,QAAS,qCACTE,YAAY,EACZI,MAAO,aAET,CACEN,QAAS,wFACTE,YAAY,EACZI,MAAO,YACPE,OAAQ,CACNG,YAAa,QAInBC,QAAS,CAEP,8RAEA,gEAKFC,SAAU,kCACVC,MAAO,CACLd,QAAS,OACTM,MAAO,YAETS,SAAU,sBACV,aAAc,eACdC,UAAW,CACThB,QAAS,6DACTQ,OAAQ,CACNG,YAAa,OAIjBM,OAAQ,yKACRC,QAAS,qBACTP,YAAa,mCACbQ,SAAU,uDAEZ1B,EAAMK,UAAUN,KAAK,kBAAkBgB,OAAOC,KAAOhB,EAAMK,UAAUN,KACrEC,EAAMK,UAAUN,KAAgB,UAAEgB,OAAe,OAC/Cf,EAAMK,UAAUN,KAAa,OAvHhC,CAwHEC,GA5HL2B,EAAOC,QAAU7B,EACjBA,EAAK8B,YAAc,OACnB9B,EAAK+B,QAAU","file":"react-syntax-highlighter_languages_refractor_rust.eec02ef294e4c50b4969.js","sourcesContent":["'use strict'\n\nmodule.exports = rust\nrust.displayName = 'rust'\nrust.aliases = []\nfunction rust(Prism) {\n  ;(function (Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source\n    for (var i = 0; i < 2; i++) {\n      // support 4 levels of nested comments\n      multilineComment = multilineComment.replace(/<self>/g, function () {\n        return multilineComment\n      })\n    }\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return /[^\\s\\S]/.source\n    })\n    Prism.languages.rust = {\n      comment: [\n        {\n          pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      string: {\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n        greedy: true\n      },\n      char: {\n        pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n        greedy: true,\n        alias: 'string'\n      },\n      attribute: {\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          string: null // see below\n        }\n      },\n      // Closure params should not be confused with bitwise OR |\n      'closure-params': {\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'closure-punctuation': {\n            pattern: /^\\||\\|$/,\n            alias: 'punctuation'\n          },\n          rest: null // see below\n        }\n      },\n      'lifetime-annotation': {\n        pattern: /'\\w+/,\n        alias: 'symbol'\n      },\n      'fragment-specifier': {\n        pattern: /(\\$\\w+:)[a-z]+/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      variable: /\\$\\w+/,\n      'function-definition': {\n        pattern: /(\\bfn\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'type-definition': {\n        pattern: /(\\b(?:enum|struct|union)\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'module-declaration': [\n        {\n          pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n          lookbehind: true,\n          alias: 'namespace'\n        },\n        {\n          pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n          lookbehind: true,\n          alias: 'namespace',\n          inside: {\n            punctuation: /::/\n          }\n        }\n      ],\n      keyword: [\n        // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n        /\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n        // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n        /\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/\n      ],\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n      // and Rust's naming conventions recommend snake_case anyway.\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n      macro: {\n        pattern: /\\w+!/,\n        alias: 'property'\n      },\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n      'class-name': /\\b[A-Z]\\w*\\b/,\n      namespace: {\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\n      number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    }\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust\n    Prism.languages.rust['attribute'].inside['string'] =\n      Prism.languages.rust['string']\n  })(Prism)\n}\n"],"sourceRoot":""}