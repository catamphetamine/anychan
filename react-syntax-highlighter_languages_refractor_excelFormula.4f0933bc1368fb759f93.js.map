{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/excel-formula.js"],"names":["excelFormula","Prism","languages","comment","pattern","lookbehind","greedy","string","reference","alias","inside","operator","punctuation","sheet","file","path","range","cell","column","row","number","boolean","module","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAaC,GACpBA,EAAMC,UAAU,iBAAmB,CACjCC,QAAS,CACPC,QAAS,qCACTC,YAAY,EACZC,QAAQ,GAEVC,OAAQ,CACNH,QAAS,sBACTE,QAAQ,GAEVE,UAAW,CAQTJ,QAAS,uEACTE,QAAQ,EACRG,MAAO,SACPC,OAAQ,CACNC,SAAU,KACVC,YAAa,IACbC,MAAO,CACLT,QAAS,WACTK,MAAO,YAETK,KAAM,CACJV,QAAS,eACTM,OAAQ,CACNE,YAAa,UAGjBG,KAAM,YAGV,gBAAiB,CACfX,QAAS,oBACTK,MAAO,WAETO,MAAO,CACLZ,QAAS,uEACTK,MAAO,WACPC,OAAQ,CACNC,SAAU,IACVM,KAAM,mBACNC,OAAQ,aACRC,IAAK,WAGTF,KAAM,CAGJb,QAAS,uDACTK,MAAO,YAETW,OAAQ,+CACRC,QAAS,sBACTV,SAAU,yBACVC,YAAa,eAEfX,EAAMC,UAAgB,KAAID,EAAMC,UAAe,IAC7CD,EAAMC,UAAU,iBAnEpBoB,EAAOC,QAAUvB,EACjBA,EAAawB,YAAc,eAC3BxB,EAAayB,QAAU","file":"react-syntax-highlighter_languages_refractor_excelFormula.4f0933bc1368fb759f93.js","sourcesContent":["'use strict'\n\nmodule.exports = excelFormula\nexcelFormula.displayName = 'excelFormula'\nexcelFormula.aliases = []\nfunction excelFormula(Prism) {\n  Prism.languages['excel-formula'] = {\n    comment: {\n      pattern: /(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n      greedy: true\n    },\n    reference: {\n      // https://www.ablebits.com/office-addins-blog/2015/12/08/excel-reference-another-sheet-workbook/\n      // Sales!B2\n      // 'Winter sales'!B2\n      // [Sales.xlsx]Jan!B2:B5\n      // D:\\Reports\\[Sales.xlsx]Jan!B2:B5\n      // '[Sales.xlsx]Jan sales'!B2:B5\n      // 'D:\\Reports\\[Sales.xlsx]Jan sales'!B2:B5\n      pattern: /(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        operator: /!$/,\n        punctuation: /'/,\n        sheet: {\n          pattern: /[^[\\]]+$/,\n          alias: 'function'\n        },\n        file: {\n          pattern: /\\[[^[\\]]+\\]$/,\n          inside: {\n            punctuation: /[[\\]]/\n          }\n        },\n        path: /[\\s\\S]+/\n      }\n    },\n    'function-name': {\n      pattern: /\\b[A-Z]\\w*(?=\\()/i,\n      alias: 'keyword'\n    },\n    range: {\n      pattern: /\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,\n      alias: 'property',\n      inside: {\n        operator: /:/,\n        cell: /\\$?[A-Z]+\\$?\\d+/i,\n        column: /\\$?[A-Z]+/i,\n        row: /\\$?\\d+/\n      }\n    },\n    cell: {\n      // Excel is case insensitive, so the string \"foo1\" could be either a variable or a cell.\n      // To combat this, we match cells case insensitive, if the contain at least one \"$\", and case sensitive otherwise.\n      pattern: /\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,\n      alias: 'property'\n    },\n    number: /(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:TRUE|FALSE)\\b/i,\n    operator: /[-+*/^%=&,]|<[=>]?|>=?/,\n    punctuation: /[[\\]();{}|]/\n  }\n  Prism.languages['xlsx'] = Prism.languages['xls'] =\n    Prism.languages['excel-formula']\n}\n"],"sourceRoot":""}