{"version":3,"sources":["webpack:///./node_modules/refractor/lang/css.js"],"names":["css","Prism","string","languages","comment","atrule","pattern","inside","rule","url","RegExp","source","selector","greedy","property","important","function","punctuation","rest","markup","tag","addInlined","insertBefore","style-attr","attr-name","attr-value","alias","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,IACG,SAAAA,GACH,IAAAC,EAAA,gDACAD,EAAAE,UAAAH,IAAA,CACAI,QAAA,mBACAC,OAAA,CACAC,QAAA,mCACAC,OAAA,CACAC,KAAA,YAIAC,IAAAC,OAAA,YAAAR,EAAAS,OAAA,gBACAC,SAAAF,OACA,wBAAyBR,EAAAS,OAAA,kBAEzBT,OAAA,CACAI,QAAAJ,EACAW,QAAA,GAEAC,SAAA,+CACAC,UAAA,gBACAC,SAAA,oBACAC,YAAA,aAEAhB,EAAAE,UAAAH,IAAA,OAAAO,OAAAW,KAAAjB,EAAAE,UAAAH,IACA,IAAAmB,EAAAlB,EAAAE,UAAAgB,OACAA,IACAA,EAAAC,IAAAC,WAAA,eACApB,EAAAE,UAAAmB,aACA,SACA,aACA,CACAC,aAAA,CACAjB,QAAA,6CACAC,OAAA,CACAiB,YAAA,CACAlB,QAAA,aACAC,OAAAY,EAAAC,IAAAb,QAEAU,YAAA,wBACAQ,aAAA,CACAnB,QAAA,MACAC,OAAAN,EAAAE,UAAAH,MAGA0B,MAAA,iBAGAP,EAAAC,MAhDG,CAmDAnB,GAvDH0B,EAAAC,QAAA5B,EACAA,EAAA6B,YAAA,MACA7B,EAAA8B,QAAA","file":"react-syntax-highlighter_languages_refractor_css.ec896e2274f7cb9d2378.js","sourcesContent":["'use strict'\n\nmodule.exports = css\ncss.displayName = 'css'\ncss.aliases = []\nfunction css(Prism) {\n  ;(function(Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    Prism.languages.css = {\n      comment: /\\/\\*[\\s\\S]*?\\*\\//,\n      atrule: {\n        pattern: /@[\\w-]+?[\\s\\S]*?(?:;|(?=\\s*\\{))/i,\n        inside: {\n          rule: /@[\\w-]+/\n          // See rest below\n        }\n      },\n      url: RegExp('url\\\\((?:' + string.source + '|.*?)\\\\)', 'i'),\n      selector: RegExp(\n        '[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'\n      ),\n      string: {\n        pattern: string,\n        greedy: true\n      },\n      property: /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n      important: /!important\\b/i,\n      function: /[-a-z0-9]+(?=\\()/i,\n      punctuation: /[(){};:,]/\n    }\n    Prism.languages.css['atrule'].inside.rest = Prism.languages.css\n    var markup = Prism.languages.markup\n    if (markup) {\n      markup.tag.addInlined('style', 'css')\n      Prism.languages.insertBefore(\n        'inside',\n        'attr-value',\n        {\n          'style-attr': {\n            pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n            inside: {\n              'attr-name': {\n                pattern: /^\\s*style/i,\n                inside: markup.tag.inside\n              },\n              punctuation: /^\\s*=\\s*['\"]|['\"]\\s*$/,\n              'attr-value': {\n                pattern: /.+/i,\n                inside: Prism.languages.css\n              }\n            },\n            alias: 'language-css'\n          }\n        },\n        markup.tag\n      )\n    }\n  })(Prism)\n}\n"],"sourceRoot":""}