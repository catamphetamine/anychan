{"version":3,"sources":["webpack:///./node_modules/refractor/lang/livescript.js"],"names":["livescript","Prism","languages","comment","pattern","lookbehind","interpolated-string","greedy","inside","variable","interpolation","interpolation-punctuation","alias","string","regex","keyword","keyword-operator","boolean","argument","number","identifier","operator","punctuation","rest","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,WAAA,CACAG,QAAA,CACA,CACAC,QAAA,4BACAC,YAAA,GAEA,CACAD,QAAA,eACAC,YAAA,IAGAC,sBAAA,CAGAF,QAAA,kDACAC,YAAA,EACAE,QAAA,EACAC,OAAA,CACAC,SAAA,CACAL,QAAA,sCACAC,YAAA,GAEAK,cAAA,CACAN,QAAA,uBACAC,YAAA,EACAG,OAAA,CACAG,4BAAA,CACAP,QAAA,WACAQ,MAAA,cAKAC,OAAA,YAGAA,OAAA,CACA,CACAT,QAAA,qCACAG,QAAA,GAEA,CACAH,QAAA,iBACAG,QAAA,GAEA,kBAEAO,MAAA,CACA,CACAV,QAAA,kDACAG,QAAA,EACAC,OAAA,CACAL,QAAA,CACAC,QAAA,eACAC,YAAA,KAIA,CACAD,QAAA,4CACAG,QAAA,IAGAQ,QAAA,CACAX,QAAA,wQACAC,YAAA,GAEAW,mBAAA,CACAZ,QAAA,+JACAC,YAAA,EACAO,MAAA,YAEAK,QAAA,CACAb,QAAA,iDACAC,YAAA,GAEAa,SAAA,CAEAd,QAAA,8BACAC,YAAA,EACAO,MAAA,YAEAO,OAAA,2DACAC,WAAA,4BACAC,SAAA,CAEA,CACAjB,QAAA,aACAC,YAAA,GAyBA,qLAEAiB,YAAA,oBAEArB,EAAAC,UAAAF,WAAA,uBAAAQ,OAEA,cAAAA,OAAAe,KAAAtB,EAAAC,UAAAF,WA3HAwB,EAAAC,QAAAzB,EACAA,EAAA0B,YAAA,aACA1B,EAAA2B,QAAA","file":"react-syntax-highlighter_languages_refractor_livescript.52d0d601ad9631c11b5a.js","sourcesContent":["'use strict'\n\nmodule.exports = livescript\nlivescript.displayName = 'livescript'\nlivescript.aliases = []\nfunction livescript(Prism) {\n  Prism.languages.livescript = {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true\n      }\n    ],\n    'interpolated-string': {\n      /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */\n      pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        variable: {\n          pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n          lookbehind: true\n        },\n        interpolation: {\n          pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^#\\{|\\}$/,\n              alias: 'variable'\n              // See rest below\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    string: [\n      {\n        pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      {\n        pattern: /<\\[[\\s\\S]*?\\]>/,\n        greedy: true\n      },\n      /\\\\[^\\s,;\\])}]+/\n    ],\n    regex: [\n      {\n        pattern: /\\/\\/(\\[.+?]|\\\\.|(?!\\/\\/)[^\\\\])+\\/\\/[gimyu]{0,5}/,\n        greedy: true,\n        inside: {\n          comment: {\n            pattern: /(^|[^\\\\])#.*/,\n            lookbehind: true\n          }\n        }\n      },\n      {\n        pattern: /\\/(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}/,\n        greedy: true\n      }\n    ],\n    keyword: {\n      pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n      lookbehind: true\n    },\n    'keyword-operator': {\n      pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?:nt| not)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    boolean: {\n      pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n      lookbehind: true\n    },\n    argument: {\n      // Don't match .&. nor &&\n      pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n    operator: [\n      // Spaced .\n      {\n        pattern: /( )\\.(?= )/,\n        lookbehind: true\n      },\n      // Full list, in order:\n      // .= .~ .. ...\n      // .&. .^. .<<. .>>. .>>>.\n      // := :: ::=\n      // &&\n      // || |>\n      // < << <<< <<<<\n      // <- <-- <-! <--!\n      // <~ <~~ <~! <~~!\n      // <| <= <?\n      // > >> >= >?\n      // - -- -> -->\n      // + ++\n      // @ @@\n      // % %%\n      // * **\n      // ! != !~=\n      // !~> !~~>\n      // !-> !-->\n      // ~ ~> ~~> ~=\n      // = ==\n      // ^ ^^\n      // / ?\n      /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/\n    ],\n    punctuation: /[(){}\\[\\]|.,:;`]/\n  }\n  Prism.languages.livescript['interpolated-string'].inside[\n    'interpolation'\n  ].inside.rest = Prism.languages.livescript\n}\n"],"sourceRoot":""}