{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/toml.js"],"names":["toml","Prism","key","source","insertKey","pattern","replace","languages","comment","greedy","table","RegExp","lookbehind","alias","string","date","number","boolean","punctuation","module","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAKC,IACX,SAAWA,GACV,IAAIC,EAAM,+CAA+CC,OAIzD,SAASC,EAAUC,GACjB,OAAOA,EAAQC,QAAQ,OAAO,WAC5B,OAAOJ,KAGXD,EAAMM,UAAUP,KAAO,CACrBQ,QAAS,CACPH,QAAS,MACTI,QAAQ,GAEVC,MAAO,CACLL,QAASM,OACPP,EAAU,kDAAkDD,QAC5D,KAEFS,YAAY,EACZH,QAAQ,EACRI,MAAO,cAETX,IAAK,CACHG,QAASM,OACPP,EAAU,0CAA0CD,QACpD,KAEFS,YAAY,EACZH,QAAQ,EACRI,MAAO,YAETC,OAAQ,CACNT,QAAS,8EACTI,QAAQ,GAEVM,KAAM,CACJ,CAEEV,QAAS,oFACTQ,MAAO,UAET,CAEER,QAAS,kCACTQ,MAAO,WAGXG,OAAQ,2KACRC,QAAS,qBACTC,YAAa,cAnDhB,CAqDEjB,GAzDLkB,EAAOC,QAAUpB,EACjBA,EAAKqB,YAAc,OACnBrB,EAAKsB,QAAU","file":"react-syntax-highlighter_languages_refractor_toml.b0904070726c4c09dc52.js","sourcesContent":["'use strict'\n\nmodule.exports = toml\ntoml.displayName = 'toml'\ntoml.aliases = []\nfunction toml(Prism) {\n  ;(function (Prism) {\n    var key = /(?:[\\w-]+|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/.source\n    /**\n     * @param {string} pattern\n     */\n    function insertKey(pattern) {\n      return pattern.replace(/__/g, function () {\n        return key\n      })\n    }\n    Prism.languages.toml = {\n      comment: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      table: {\n        pattern: RegExp(\n          insertKey(/(^\\s*\\[\\s*(?:\\[\\s*)?)__(?:\\s*\\.\\s*__)*(?=\\s*\\])/.source),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name'\n      },\n      key: {\n        pattern: RegExp(\n          insertKey(/(^\\s*|[{,]\\s*)__(?:\\s*\\.\\s*__)*(?=\\s*=)/.source),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'property'\n      },\n      string: {\n        pattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n      },\n      date: [\n        {\n          // Offset Date-Time, Local Date-Time, Local Date\n          pattern: /\\b\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?\\b/i,\n          alias: 'number'\n        },\n        {\n          // Local Time\n          pattern: /\\b\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?\\b/,\n          alias: 'number'\n        }\n      ],\n      number: /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\b\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?\\b(?:inf|nan)\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      punctuation: /[.,=[\\]{}]/\n    }\n  })(Prism)\n}\n"],"sourceRoot":""}