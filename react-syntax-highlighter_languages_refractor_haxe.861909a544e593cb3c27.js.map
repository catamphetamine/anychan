{"version":3,"sources":["webpack:///./node_modules/refractor/lang/haxe.js"],"names":["haxe","Prism","languages","extend","string","pattern","greedy","inside","interpolation","lookbehind","alias","keyword","operator","insertBefore","regex","preprocessor","metadata","reification","rest","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,KAAAC,EAAAC,UAAAC,OAAA,SAEAC,OAAA,CACAC,QAAA,oCACAC,QAAA,EACAC,OAAA,CACAC,cAAA,CACAH,QAAA,+BACAI,YAAA,EACAF,OAAA,CACAC,cAAA,CACAH,QAAA,SACAK,MAAA,gBAQAC,QAAA,wRACAC,SAAA,+DAEAX,EAAAC,UAAAW,aAAA,qBACAC,MAAA,CACAT,QAAA,oCACAC,QAAA,KAGAL,EAAAC,UAAAW,aAAA,kBACAE,aAAA,CACAV,QAAA,OACAK,MAAA,WAEAM,SAAA,CACAX,QAAA,SACAK,MAAA,UAEAO,YAAA,CACAZ,QAAA,mBACAK,MAAA,cAGAT,EAAAC,UAAAF,KAAA,OAAAO,OAAA,cAAAA,OAAAW,KACAjB,EAAAC,UAAAF,YACAC,EAAAC,UAAAF,KAAA,cAjDAmB,EAAAC,QAAApB,EACAA,EAAAqB,YAAA,OACArB,EAAAsB,QAAA","file":"react-syntax-highlighter_languages_refractor_haxe.861909a544e593cb3c27.js","sourcesContent":["'use strict'\n\nmodule.exports = haxe\nhaxe.displayName = 'haxe'\nhaxe.aliases = []\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    // Strings can be multi-line\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n          lookbehind: true,\n          inside: {\n            interpolation: {\n              pattern: /^\\$\\w*/,\n              alias: 'variable'\n              // See rest below\n            }\n          }\n        }\n      }\n    },\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n    operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n  })\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#\\w+/,\n      alias: 'builtin'\n    },\n    metadata: {\n      pattern: /@:?\\w+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'variable'\n    }\n  })\n  Prism.languages.haxe['string'].inside['interpolation'].inside.rest =\n    Prism.languages.haxe\n  delete Prism.languages.haxe['class-name']\n}\n"],"sourceRoot":""}