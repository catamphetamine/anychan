{"version":3,"sources":["webpack:///./node_modules/refractor/lang/c.js","webpack:///./node_modules/refractor/lang/bison.js"],"names":["c","Prism","languages","extend","class-name","pattern","lookbehind","keyword","operator","number","insertBefore","macro","alias","inside","string","directive","constant","module","exports","displayName","aliases","refractorC","__webpack_require__","bison","register","delimiter","bison-variable","punctuation","rest","comment","property"],"mappings":"+FAKA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,EAAAC,EAAAC,UAAAC,OAAA,SACAC,aAAA,CACAC,QAAA,4BACAC,YAAA,GAEAC,QAAA,sUACAC,SAAA,mDACAC,OAAA,0GAEAR,EAAAC,UAAAQ,aAAA,cACAC,MAAA,CAGAN,QAAA,qDACAC,YAAA,EACAM,MAAA,WACAC,OAAA,CAEAC,OAAA,CACAT,QAAA,8CACAC,YAAA,GAGAS,UAAA,CACAV,QAAA,4GACAC,YAAA,EACAM,MAAA,aAKAI,SAAA,sIAEAf,EAAAC,UAAAF,EAAA,QArCAiB,EAAAC,QAAAlB,EACAA,EAAAmB,YAAA,IACAnB,EAAAoB,QAAA,sCCHA,IAAAC,EAAiBC,EAAQ,MAIzB,SAAAC,EAAAtB,GACAA,EAAAuB,SAAAH,GACApB,EAAAC,UAAAqB,MAAAtB,EAAAC,UAAAC,OAAA,QACAF,EAAAC,UAAAQ,aAAA,mBACAa,MAAA,CAIAlB,QAAA,wBACAQ,OAAA,CACAb,EAAA,CAEAK,QAAA,0CACAQ,OAAA,CACAY,UAAA,CACApB,QAAA,cACAO,MAAA,eAEAc,iBAAA,CACArB,QAAA,2BACAO,MAAA,WACAC,OAAA,CACAc,YAAA,QAGAC,KAAA3B,EAAAC,UAAAF,IAGA6B,QAAA5B,EAAAC,UAAAF,EAAA6B,QACAf,OAAAb,EAAAC,UAAAF,EAAAc,OACAgB,SAAA,WACAvB,QAAA,OACAE,OAAA,CACAJ,QAAA,gCACAC,YAAA,GAEAqB,YAAA,wBAvCAV,EAAAC,QAAAK,EACAA,EAAAJ,YAAA,QACAI,EAAAH,QAAA","file":"react-syntax-highlighter_languages_refractor_bison.02032c6181511e1c6e36.js","sourcesContent":["'use strict'\n\nmodule.exports = c\nc.displayName = 'c'\nc.aliases = []\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n    number: /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight the path of the include statement as a string\n        string: {\n          pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n          lookbehind: true\n        },\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    },\n    // highlight predefined macros as constants\n    constant: /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n  })\n  delete Prism.languages.c['boolean']\n}\n","'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = bison\nbison.displayName = 'bison'\nbison.aliases = []\nfunction bison(Prism) {\n  Prism.register(refractorC)\n  Prism.languages.bison = Prism.languages.extend('c', {})\n  Prism.languages.insertBefore('bison', 'comment', {\n    bison: {\n      // This should match all the beginning of the file\n      // including the prologue(s), the bison declarations and\n      // the grammar rules.\n      pattern: /^[\\s\\S]*?%%[\\s\\S]*?%%/,\n      inside: {\n        c: {\n          // Allow for one level of nested braces\n          pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^%?\\{|%?\\}$/,\n              alias: 'punctuation'\n            },\n            'bison-variable': {\n              pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n              alias: 'variable',\n              inside: {\n                punctuation: /<|>/\n              }\n            },\n            rest: Prism.languages.c\n          }\n        },\n        comment: Prism.languages.c.comment,\n        string: Prism.languages.c.string,\n        property: /\\S+(?=:)/,\n        keyword: /%\\w+/,\n        number: {\n          pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n          lookbehind: true\n        },\n        punctuation: /%[%?]|[|:;\\[\\]<>]/\n      }\n    }\n  })\n}\n"],"sourceRoot":""}