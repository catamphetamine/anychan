{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/haml.js","webpack://captchan/./node_modules/refractor/lang/ruby.js"],"names":["refractorRuby","haml","Prism","register","languages","pattern","lookbehind","alias","inside","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","rest","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore","module","exports","displayName","aliases","extend","comment","greedy","keyword","function","regex","source","join","variable","symbol","builtin","constant","string","rb"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_haml.3588abf4faa30b5edf52.js","sourcesContent":["'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = haml\nhaml.displayName = 'haml'\nhaml.aliases = []\nfunction haml(Prism) {\n  Prism.register(refractorRuby)\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n              lookbehind: true,\n              inside: Prism.languages.ruby\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: Prism.languages.ruby\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', function () {\n              return filter.filter\n            })\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;(function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      'class-name': {\n        pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: RegExp(\n            /%r/.source +\n              '(?:' +\n              [\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/\n                  .source,\n                /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/.source, // Here we need to specifically allow interpolation\n                /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/.source,\n                /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/.source,\n                /<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/.source\n              ].join('|') +\n              ')'\n          ),\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*(?:$|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: RegExp(\n          /%[qQiIwWxs]?/.source +\n            '(?:' +\n            [\n              /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n              /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source, // Here we need to specifically allow interpolation\n              /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,\n              /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,\n              /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source\n            ].join('|') +\n            ')'\n        ),\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n"],"sourceRoot":""}