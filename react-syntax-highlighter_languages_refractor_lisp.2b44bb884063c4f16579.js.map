{"version":3,"sources":["webpack:///./node_modules/refractor/lang/lisp.js"],"names":["lisp","Prism","simple_form","name","RegExp","primitive","pattern","symbol","par","language","heading","alias","comment","string","greedy","inside","argument","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","arg","rest","varform","forms","arglist","keys","util","clone","sublist","languages","elisp","emacs","module","exports","displayName","aliases"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_lisp.2b44bb884063c4f16579.js","sourcesContent":["'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function(Prism) {\n    // Functions to construct regular expressions\n    // simple form\n    // e.g. (interactive ... or (interactive)\n    function simple_form(name) {\n      return RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])')\n    } // booleans and numbers\n    function primitive(pattern) {\n      return RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])')\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+' // symbol starting with & used in function arguments\n    var marker = '&' + symbol // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))' // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: RegExp(\n            par +\n              '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: RegExp(\n            par +\n              '(?:for|do|collect|return|finally|append|concat|in|by)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form('declare'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form('interactive'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive('(?:t|nil)'),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(\n          par +\n            '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n            symbol +\n            '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(['`,]?\\(|[)\\[\\]])/, // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      rest: {\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        varform: {\n          pattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n          lookbehind: true,\n          inside: {\n            string: language.string,\n            boolean: language.boolean,\n            number: language.number,\n            symbol: language.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n"],"sourceRoot":""}