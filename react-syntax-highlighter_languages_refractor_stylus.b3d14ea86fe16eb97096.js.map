{"version":3,"sources":["webpack:///./node_modules/refractor/lang/stylus.js"],"names":["stylus","Prism","inside","url","string","pattern","greedy","interpolation","func","important","keyword","lookbehind","hexcode","number","boolean","operator","punctuation","alias","delimiter","rest","function","languages","comment","atrule-declaration","atrule","variable-declaration","variable","statement","property-declaration","property","selector","module","exports","displayName","aliases"],"mappings":"6FAKA,SAAAA,EAAAC,IACG,SAAAA,GACH,IAAAC,EAAA,CACAC,IAAA,uBACAC,OAAA,CACAC,QAAA,gDACAC,QAAA,GAEAC,cAAA,KACAC,KAAA,KACAC,UAAA,+BACAC,QAAA,CACAL,QAAA,4DACAM,YAAA,GAEAC,QAAA,iBACAC,OAAA,oBACAC,QAAA,qBACAC,SAAA,CAGA,oGAEAC,YAAA,iBAEAd,EAAA,eACAG,QAAA,iBACAY,MAAA,WACAf,OAAA,CACAgB,UAAA,CACAb,QAAA,QACAY,MAAA,eAEAE,KAAAjB,IAGAA,EAAA,MACAG,QAAA,oBACAH,OAAA,CACAkB,SAAA,SACAD,KAAAjB,IAGAD,EAAAoB,UAAArB,OAAA,CACAsB,QAAA,CACAjB,QAAA,qCACAM,YAAA,GAEAY,qBAAA,CACAlB,QAAA,aACAM,YAAA,EACAT,OAAA,CACAsB,OAAA,WACAL,KAAAjB,IAGAuB,uBAAA,CACApB,QAAA,sDACAM,YAAA,EACAT,OAAA,CACAwB,SAAA,OACAP,KAAAjB,IAGAyB,UAAA,CACAtB,QAAA,kDACAM,YAAA,EACAT,OAAA,CACAQ,QAAA,OACAS,KAAAjB,IAKA0B,uBAAA,CACAvB,QAAA,0HACAM,YAAA,EACAT,OAAA,CACA2B,SAAA,CACAxB,QAAA,WACAH,OAAA,CACAK,cAAAL,EAAAK,gBAGAY,KAAAjB,IAMA4B,SAAA,CACAzB,QAAA,uNACAM,YAAA,EACAT,OAAA,CACAK,cAAAL,EAAAK,cACAS,YAAA,UAGAR,KAAAN,EAAAM,KACAJ,OAAAF,EAAAE,OACAG,cAAAL,EAAAK,cACAS,YAAA,iBApGG,CAsGAf,GA1GH8B,EAAAC,QAAAhC,EACAA,EAAAiC,YAAA,SACAjC,EAAAkC,QAAA","file":"react-syntax-highlighter_languages_refractor_stylus.b3d14ea86fe16eb97096.js","sourcesContent":["'use strict'\n\nmodule.exports = stylus\nstylus.displayName = 'stylus'\nstylus.aliases = []\nfunction stylus(Prism) {\n  ;(function(Prism) {\n    var inside = {\n      url: /url\\(([\"']?).*?\\1\\)/i,\n      string: {\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: true\n      },\n      interpolation: null, // See below\n      func: null, // See below\n      important: /\\B!(?:important|optional)\\b/i,\n      keyword: {\n        pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n        lookbehind: true\n      },\n      hexcode: /#[\\da-f]{3,6}/i,\n      number: /\\b\\d+(?:\\.\\d+)?%?/,\n      boolean: /\\b(?:true|false)\\b/,\n      operator: [\n        // We want non-word chars around \"-\" because it is\n        // accepted in property names.\n        /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\n      ],\n      punctuation: /[{}()\\[\\];:,]/\n    }\n    inside['interpolation'] = {\n      pattern: /\\{[^\\r\\n}:]+\\}/,\n      alias: 'variable',\n      inside: {\n        delimiter: {\n          pattern: /^{|}$/,\n          alias: 'punctuation'\n        },\n        rest: inside\n      }\n    }\n    inside['func'] = {\n      pattern: /[\\w-]+\\([^)]*\\).*/,\n      inside: {\n        function: /^[^(]+/,\n        rest: inside\n      }\n    }\n    Prism.languages.stylus = {\n      comment: {\n        pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      },\n      'atrule-declaration': {\n        pattern: /(^\\s*)@.+/m,\n        lookbehind: true,\n        inside: {\n          atrule: /^@[\\w-]+/,\n          rest: inside\n        }\n      },\n      'variable-declaration': {\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n        lookbehind: true,\n        inside: {\n          variable: /^\\S+/,\n          rest: inside\n        }\n      },\n      statement: {\n        pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\S+/,\n          rest: inside\n        }\n      },\n      // A property/value pair cannot end with a comma or a brace\n      // It cannot have indented content unless it ended with a semicolon\n      'property-declaration': {\n        pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n        lookbehind: true,\n        inside: {\n          property: {\n            pattern: /^[^\\s:]+/,\n            inside: {\n              interpolation: inside.interpolation\n            }\n          },\n          rest: inside\n        }\n      },\n      // A selector can contain parentheses only as part of a pseudo-element\n      // It can span multiple lines.\n      // It must end with a comma or an accolade or have indented content.\n      selector: {\n        pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n        lookbehind: true,\n        inside: {\n          interpolation: inside.interpolation,\n          punctuation: /[{},]/\n        }\n      },\n      func: inside.func,\n      string: inside.string,\n      interpolation: inside.interpolation,\n      punctuation: /[{}()\\[\\];:.]/\n    }\n  })(Prism)\n}\n"],"sourceRoot":""}