{"version":3,"sources":["webpack:///./node_modules/refractor/lang/velocity.js"],"names":["velocity","Prism","languages","extend","variable","pattern","lookbehind","inside","string","greedy","number","boolean","operator","punctuation","function","insertBefore","unparsed","velocity-comment","alias","directive","keyword","rest","module","exports","displayName","aliases"],"mappings":"6FAKA,SAAAA,EAAAC,IACG,SAAAA,GACHA,EAAAC,UAAAF,SAAAC,EAAAC,UAAAC,OAAA,aACA,IAAAH,EAAA,CACAI,SAAA,CACAC,QAAA,yGACAC,YAAA,EACAC,OAAA,IAEAC,OAAA,CACAH,QAAA,kBACAI,QAAA,GAEAC,OAAA,UACAC,QAAA,qBACAC,SAAA,kEACAC,YAAA,gBAEAb,EAAAI,SAAAG,OAAA,CACAC,OAAAR,EAAA,OACAc,SAAA,CACAT,QAAA,4BACAC,YAAA,GAEAI,OAAAV,EAAA,OACAW,QAAAX,EAAA,QACAa,YAAAb,EAAA,aAEAC,EAAAC,UAAAa,aAAA,sBACAC,SAAA,CACAX,QAAA,4BACAC,YAAA,EACAG,QAAA,EACAF,OAAA,CACAM,YAAA,gBAGAI,mBAAA,CACA,CACAZ,QAAA,0BACAC,YAAA,EACAG,QAAA,EACAS,MAAA,WAEA,CACAb,QAAA,gBACAC,YAAA,EACAG,QAAA,EACAS,MAAA,YAGAC,UAAA,CACAd,QAAA,uFACAC,YAAA,EACAC,OAAA,CACAa,QAAA,CACAf,QAAA,2CACAE,OAAA,CACAM,YAAA,SAGAQ,KAAArB,IAGAI,SAAAJ,EAAA,WAEAC,EAAAC,UAAAF,SAAA,IAAAO,OAAA,cAAAA,OAAAc,KACApB,EAAAC,UAAAF,SAlEG,CAmEAC,GAvEHqB,EAAAC,QAAAvB,EACAA,EAAAwB,YAAA,WACAxB,EAAAyB,QAAA","file":"react-syntax-highlighter_languages_refractor_velocity.19ce33666d3cb17e70a9.js","sourcesContent":["'use strict'\n\nmodule.exports = velocity\nvelocity.displayName = 'velocity'\nvelocity.aliases = []\nfunction velocity(Prism) {\n  ;(function(Prism) {\n    Prism.languages.velocity = Prism.languages.extend('markup', {})\n    var velocity = {\n      variable: {\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,\n        lookbehind: true,\n        inside: {} // See below\n      },\n      string: {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      number: /\\b\\d+\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      operator: /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n      punctuation: /[(){}[\\]:,.]/\n    }\n    velocity.variable.inside = {\n      string: velocity['string'],\n      function: {\n        pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n        lookbehind: true\n      },\n      number: velocity['number'],\n      boolean: velocity['boolean'],\n      punctuation: velocity['punctuation']\n    }\n    Prism.languages.insertBefore('velocity', 'comment', {\n      unparsed: {\n        pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^#\\[\\[|]]#$/\n        }\n      },\n      'velocity-comment': [\n        {\n          pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        },\n        {\n          pattern: /(^|[^\\\\])##.*/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'comment'\n        }\n      ],\n      directive: {\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,\n            inside: {\n              punctuation: /[{}]/\n            }\n          },\n          rest: velocity\n        }\n      },\n      variable: velocity['variable']\n    })\n    Prism.languages.velocity['tag'].inside['attr-value'].inside.rest =\n      Prism.languages.velocity\n  })(Prism)\n}\n"],"sourceRoot":""}