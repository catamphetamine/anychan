{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/concurnas.js"],"names":["concurnas","Prism","languages","comment","pattern","lookbehind","greedy","langext","alias","function","keyword","boolean","number","punctuation","operator","annotation","insertBefore","string","inside","interpolation","conc","module","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAUC,GACjBA,EAAMC,UAAUF,UAAY,CAC1BG,QAAS,CACP,CACEC,QAAS,kCACTC,YAAY,GAEd,CACED,QAAS,mBACTC,YAAY,EACZC,QAAQ,IAGZC,QAAS,CACPH,QAAS,yBACTE,QAAQ,EACRE,MAAO,UAETC,SAAU,CACRL,QAAS,2CACTC,YAAY,GAEdK,QAAS,0jBACTC,QAAS,qBACTC,OAAQ,oHACRC,YAAa,gBACbC,SAAU,uHACVC,WAAY,CACVX,QAAS,+BACTI,MAAO,YAGXP,EAAMC,UAAUc,aAAa,YAAa,UAAW,CACnDC,OAAQ,CACNb,QAAS,uCACTE,QAAQ,EACRY,OAAQ,CACNC,cAAe,CACbf,QAAS,2DACTC,YAAY,EACZa,OAAQjB,EAAMC,UAAUF,WAE1BiB,OAAQ,cAIdhB,EAAMC,UAAUkB,KAAOnB,EAAMC,UAAUF,UAjDzCqB,EAAOC,QAAUtB,EACjBA,EAAUuB,YAAc,YACxBvB,EAAUwB,QAAU,CAAC","file":"react-syntax-highlighter_languages_refractor_concurnas.15c9e5335da1635094db.js","sourcesContent":["'use strict'\n\nmodule.exports = concurnas\nconcurnas.displayName = 'concurnas'\nconcurnas.aliases = ['conc']\nfunction concurnas(Prism) {\n  Prism.languages.concurnas = {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    langext: {\n      pattern: /\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,\n      greedy: true,\n      alias: 'string'\n    },\n    function: {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,\n    punctuation: /[{}[\\];(),.:]/,\n    operator: /<==|>==|=>|->|<-|<>|\\^|&==|&<>|!|\\?|\\?:|\\.\\?|\\+\\+|--|[-+*/=<>]=?|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,\n    annotation: {\n      pattern: /@(?:\\w+:)?(?:\\w*|\\[[^\\]]+\\])/,\n      alias: 'builtin'\n    }\n  }\n  Prism.languages.insertBefore('concurnas', 'langext', {\n    string: {\n      pattern: /[rs]?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*){(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.conc = Prism.languages.concurnas\n}\n"],"sourceRoot":""}