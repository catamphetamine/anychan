{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/etlua.js","webpack://captchan/./node_modules/refractor/lang/lua.js","webpack://captchan/./node_modules/refractor/lang/markup-templating.js"],"names":["refractorLua","refractorMarkupTemplating","etlua","Prism","register","languages","delimiter","pattern","alias","inside","lua","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","comment","string","greedy","number","keyword","function","operator","lookbehind","punctuation","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_etlua.195ec79f54c563e161ec.js","sourcesContent":["'use strict'\nvar refractorLua = require('./lua.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = etlua\netlua.displayName = 'etlua'\netlua.aliases = []\nfunction etlua(Prism) {\n  Prism.register(refractorLua)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.etlua = {\n      delimiter: {\n        pattern: /^<%[-=]?|-?%>$/,\n        alias: 'punctuation'\n      },\n      'language-lua': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.lua\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var pattern = /<%[\\s\\S]+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'etlua',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = lua\nlua.displayName = 'lua'\nlua.aliases = []\nfunction lua(Prism) {\n  Prism.languages.lua = {\n    comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n      greedy: true\n    },\n    number: /\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    keyword: /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    operator: [\n      /[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,\n      {\n        // Match \"..\" but don't break \"...\"\n        pattern: /(^|[^.])\\.\\.(?!\\.)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /[\\[\\](){},;]|\\.+|:+/\n  }\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}