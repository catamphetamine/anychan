{"version":3,"sources":["webpack:///./node_modules/refractor/lang/ruby.js","webpack:///./node_modules/refractor/lang/crystal.js"],"names":["ruby","Prism","languages","extend","comment","pattern","greedy","keyword","interpolation","inside","delimiter","alias","rest","function","insertBefore","regex","lookbehind","variable","symbol","method-definition","builtin","constant","string","rb","module","exports","displayName","aliases","refractorRuby","__webpack_require__","crystal","register","number","attribute","expansion"],"mappings":"gGAKA,SAAAA,EAAAC,IAOG,SAAAA,GACHA,EAAAC,UAAAF,KAAAC,EAAAC,UAAAC,OAAA,SACAC,QAAA,CACA,MACA,CACAC,QAAA,0BACAC,QAAA,IAGAC,QAAA,yRAEA,IAAAC,EAAA,CACAH,QAAA,aACAI,OAAA,CACAC,UAAA,CACAL,QAAA,WACAM,MAAA,OAEAC,KAAAX,EAAAC,UAAAF,cAGAC,EAAAC,UAAAF,KAAAa,SACAZ,EAAAC,UAAAY,aAAA,kBACAC,MAAA,CACA,CACAV,QAAA,+DACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,wCACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CAEAH,QAAA,yDACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,0CACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,sCACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,+EACAW,YAAA,EACAV,QAAA,IAGAW,SAAA,+BACAC,OAAA,CACAb,QAAA,mCACAW,YAAA,GAEAG,oBAAA,CACAd,QAAA,mBACAW,YAAA,EACAP,OAAA,CACAI,SAAA,OACAD,KAAAX,EAAAC,UAAAF,SAIAC,EAAAC,UAAAY,aAAA,iBACAM,QAAA,+OACAC,SAAA,0BAEApB,EAAAC,UAAAF,KAAAsB,OAAA,CACA,CACAjB,QAAA,+DACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,wCACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CAEAH,QAAA,yDACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,0CACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,sCACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,2DACAC,QAAA,EACAG,OAAA,CACAD,mBAIAP,EAAAC,UAAAqB,GAAAtB,EAAAC,UAAAF,KAjIG,CAkIAC,GA5IHuB,EAAAC,QAAAzB,EACAA,EAAA0B,YAAA,OACA1B,EAAA2B,QAAA,0CCHA,IAAAC,EAAoBC,EAAQ,MAI5B,SAAAC,EAAA7B,GACAA,EAAA8B,SAAAH,GACG,SAAA3B,GACHA,EAAAC,UAAA4B,QAAA7B,EAAAC,UAAAC,OAAA,QACAI,QAAA,CACA,iWACA,CACAF,QAAA,gCACAW,YAAA,IAGAgB,OAAA,wJAEA/B,EAAAC,UAAAY,aAAA,oBACAmB,UAAA,CACA5B,QAAA,WACAM,MAAA,YACAF,OAAA,CACAC,UAAA,CACAL,QAAA,WACAM,MAAA,OAEAC,KAAAX,EAAAC,UAAA4B,UAGAI,UAAA,CACA,CACA7B,QAAA,cACAI,OAAA,CACAC,UAAA,CACAL,QAAA,cACAM,MAAA,OAEAC,KAAAX,EAAAC,UAAA4B,UAGA,CACAzB,QAAA,YACAI,OAAA,CACAC,UAAA,CACAL,QAAA,YACAM,MAAA,OAEAC,KAAAX,EAAAC,UAAA4B,aAzCG,CA8CA7B,GAnDHuB,EAAAC,QAAAK,EACAA,EAAAJ,YAAA,UACAI,EAAAH,QAAA","file":"react-syntax-highlighter_languages_refractor_crystal.8bbdb581e56f54f14f8e.js","sourcesContent":["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;(function(Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          // Here we need to specifically allow interpolation\n          pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        // Here we need to specifically allow interpolation\n        pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n","'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = crystal\ncrystal.displayName = 'crystal'\ncrystal.aliases = []\nfunction crystal(Prism) {\n  Prism.register(refractorRuby)\n  ;(function(Prism) {\n    Prism.languages.crystal = Prism.languages.extend('ruby', {\n      keyword: [\n        /\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/,\n        {\n          pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n          lookbehind: true\n        }\n      ],\n      number: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/\n    })\n    Prism.languages.insertBefore('crystal', 'string', {\n      attribute: {\n        pattern: /@\\[.+?\\]/,\n        alias: 'attr-name',\n        inside: {\n          delimiter: {\n            pattern: /^@\\[|\\]$/,\n            alias: 'tag'\n          },\n          rest: Prism.languages.crystal\n        }\n      },\n      expansion: [\n        {\n          pattern: /\\{\\{.+?\\}\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^\\{\\{|\\}\\}$/,\n              alias: 'tag'\n            },\n            rest: Prism.languages.crystal\n          }\n        },\n        {\n          pattern: /\\{%.+?%\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^\\{%|%\\}$/,\n              alias: 'tag'\n            },\n            rest: Prism.languages.crystal\n          }\n        }\n      ]\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}