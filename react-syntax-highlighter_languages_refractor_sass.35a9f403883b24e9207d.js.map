{"version":3,"sources":["webpack:///./node_modules/refractor/lang/sass.js"],"names":["sass","Prism","languages","extend","comment","pattern","lookbehind","insertBefore","atrule-line","inside","atrule","variable","operator","variable-line","punctuation","property-line","property","important","selector","module","exports","displayName","aliases"],"mappings":"6FAKA,SAAAA,EAAAC,IACG,SAAAA,GACHA,EAAAC,UAAAF,KAAAC,EAAAC,UAAAC,OAAA,OAEAC,QAAA,CACAC,QAAA,iDACAC,YAAA,KAGAL,EAAAC,UAAAK,aAAA,iBAEAC,cAAA,CAEAH,QAAA,sBACAI,OAAA,CACAC,OAAA,+BAIAT,EAAAC,UAAAF,KAAAU,OACA,IAAAC,EAAA,yBACAC,EAAA,CACA,2CACA,CACAP,QAAA,eACAC,YAAA,IAGAL,EAAAC,UAAAK,aAAA,mBAEAM,gBAAA,CACAR,QAAA,eACAI,OAAA,CACAK,YAAA,IACAH,WACAC,aAIAG,gBAAA,CACAV,QAAA,sCACAI,OAAA,CACAO,SAAA,CACA,kBACA,CACAX,QAAA,aACAC,YAAA,IAGAQ,YAAA,IACAH,WACAC,WACAK,UAAAhB,EAAAC,UAAAF,KAAAiB,qBAIAhB,EAAAC,UAAAF,KAAAgB,gBACAf,EAAAC,UAAAF,KAAAiB,UAGAhB,EAAAC,UAAAK,aAAA,sBACAW,SAAA,CACAb,QAAA,yEACAC,YAAA,KA9DG,CAiEAL,GArEHkB,EAAAC,QAAApB,EACAA,EAAAqB,YAAA,OACArB,EAAAsB,QAAA","file":"react-syntax-highlighter_languages_refractor_sass.35a9f403883b24e9207d.js","sourcesContent":["'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function(Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n      {\n        pattern: /(\\s+)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important\n    // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}