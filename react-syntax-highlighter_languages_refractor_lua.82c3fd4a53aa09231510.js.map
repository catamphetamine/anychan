{"version":3,"sources":["webpack:///./node_modules/refractor/lang/lua.js"],"names":["lua","Prism","languages","comment","string","pattern","greedy","number","keyword","function","operator","lookbehind","punctuation","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,GACAA,EAAAC,UAAAF,IAAA,CACAG,QAAA,yCAEAC,OAAA,CACAC,QAAA,uFACAC,QAAA,GAEAC,OAAA,wGACAC,QAAA,0HACAC,SAAA,2BACAC,SAAA,CACA,wCACA,CAEAL,QAAA,qBACAM,YAAA,IAGAC,YAAA,uBAtBAC,EAAAC,QAAAd,EACAA,EAAAe,YAAA,MACAf,EAAAgB,QAAA","file":"react-syntax-highlighter_languages_refractor_lua.82c3fd4a53aa09231510.js","sourcesContent":["'use strict'\n\nmodule.exports = lua\nlua.displayName = 'lua'\nlua.aliases = []\nfunction lua(Prism) {\n  Prism.languages.lua = {\n    comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n      greedy: true\n    },\n    number: /\\b0x[a-f\\d]+\\.?[a-f\\d]*(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|\\.?\\d*(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    keyword: /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    operator: [\n      /[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,\n      {\n        // Match \"..\" but don't break \"...\"\n        pattern: /(^|[^.])\\.\\.(?!\\.)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /[\\[\\](){},;]|\\.+|:+/\n  }\n}\n"],"sourceRoot":""}