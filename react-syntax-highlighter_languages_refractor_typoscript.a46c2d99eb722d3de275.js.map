{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/typoscript.js"],"names":["typoscript","Prism","keywords","languages","comment","pattern","lookbehind","greedy","function","inside","string","keyword","number","punctuation","operator","tag","tsconfig","module","exports","displayName","aliases"],"mappings":"8FAKA,SAASA,EAAWC,IACjB,SAAWA,GACV,IAAIC,EAAW,gcACfD,EAAME,UAAUH,WAAa,CAC3BI,QAAS,CACP,CAEEC,QAAS,kCACTC,YAAY,GAEd,CAGED,QAAS,2CACTC,YAAY,EACZC,QAAQ,GAEV,CAEEF,QAAS,eACTC,YAAY,EACZC,QAAQ,IAGZC,SAAU,CACR,CAEEH,QAAS,sEACTI,OAAQ,CACNC,OAAQ,CACNL,QAAS,0BACTI,OAAQ,CACNE,QAAST,IAGbS,QAAS,CACPN,QAAS,wBAIf,CAEEA,QAAS,wCACTI,OAAQ,CACNC,OAAQ,6BAIdA,OAAQ,CACNL,QAAS,8BACTC,YAAY,EACZG,OAAQ,CACND,SAAU,SAEVG,QAAST,EACTU,OAAQ,WACRC,YAAa,UAGjBF,QAAST,EACTU,OAAQ,CAENP,QAAS,iBACTI,OAAQ,CACNK,SAAU,UAGdC,IAAK,CACHV,QAAS,iBACTI,OAAQ,CACNI,YAAa,OAGjBA,YAAa,iBACbC,SAAU,gDAEZb,EAAME,UAAUa,SAAWf,EAAME,UAAUH,WA3E5C,CA4EEC,GAhFLgB,EAAOC,QAAUlB,EACjBA,EAAWmB,YAAc,aACzBnB,EAAWoB,QAAU,CAAC","file":"react-syntax-highlighter_languages_refractor_typoscript.a46c2d99eb722d3de275.js","sourcesContent":["'use strict'\n\nmodule.exports = typoscript\ntyposcript.displayName = 'typoscript'\ntyposcript.aliases = ['tsconfig']\nfunction typoscript(Prism) {\n  ;(function (Prism) {\n    var keywords = /\\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\\b/\n    Prism.languages.typoscript = {\n      comment: [\n        {\n          // multiline comments /* */\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true\n        },\n        {\n          // double-slash comments - ignored when backslashes or colon is found in front\n          // also ignored whenever directly after an equal-sign, because it would probably be an url without protocol\n          pattern: /(^|[^\\\\:= \\t]|(?:^|[^= \\t])[ \\t]+)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          // hash comments - ignored when leading quote is found for hex colors in strings\n          pattern: /(^|[^\"'])#.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      function: [\n        {\n          // old include style\n          pattern: /<INCLUDE_TYPOSCRIPT:\\s*source\\s*=\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*>/,\n          inside: {\n            string: {\n              pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n              inside: {\n                keyword: keywords\n              }\n            },\n            keyword: {\n              pattern: /INCLUDE_TYPOSCRIPT/\n            }\n          }\n        },\n        {\n          // new include style\n          pattern: /@import\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')/,\n          inside: {\n            string: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/\n          }\n        }\n      ],\n      string: {\n        pattern: /^([^=]*=[< ]?)(?:(?!]\\n).)*/,\n        lookbehind: true,\n        inside: {\n          function: /{\\$.*}/,\n          // constants include\n          keyword: keywords,\n          number: /^[0-9]+$/,\n          punctuation: /[,|:]/\n        }\n      },\n      keyword: keywords,\n      number: {\n        // special highlighting for indexes of arrays in tags\n        pattern: /[0-9]+\\s*[.{=]/,\n        inside: {\n          operator: /[.{=]/\n        }\n      },\n      tag: {\n        pattern: /\\.?[\\w-\\\\]+\\.?/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      punctuation: /[{}[\\];(),.:|]/,\n      operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/\n    }\n    Prism.languages.tsconfig = Prism.languages.typoscript\n  })(Prism)\n}\n"],"sourceRoot":""}