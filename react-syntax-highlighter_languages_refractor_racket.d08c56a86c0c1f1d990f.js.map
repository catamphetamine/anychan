{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/racket.js","webpack://captchan/./node_modules/refractor/lang/scheme.js"],"names":["refractorScheme","racket","Prism","register","languages","extend","pattern","lookbehind","DFS","key","value","util","type","source","replace","m","g1","g2","this","RegExp","flags","insertBefore","lang","greedy","alias","rkt","module","exports","displayName","aliases","scheme","comment","string","symbol","character","keyword","builtin","number","boolean","operator","function","punctuation"],"mappings":"0GACA,IAAIA,EAAkB,EAAQ,MAI9B,SAASC,EAAOC,GACdA,EAAMC,SAASH,GACfE,EAAME,UAAUH,OAASC,EAAME,UAAUC,OAAO,SAAU,CACxD,mBAAoB,CAGlBC,QAAS,2BACTC,YAAY,KAehBL,EAAME,UAAUI,IAAIN,EAAME,UAAUH,QAAQ,SAAUQ,EAAKC,GACzD,GAA+B,WAA3BR,EAAMS,KAAKC,KAAKF,GAAqB,CACvC,IAAIG,EAASH,EAAMG,OAAOC,QACxB,oCACA,SAAUC,EAAGC,EAAIC,GACf,GAAID,EAAI,CACN,GAAW,MAAPA,EAEF,MAAO,OAET,GAAW,MAAPA,EAEF,MAAO,SAGX,OAAIC,GACoB,MAATF,EAAE,GAAa,KAAO,KAGjCE,EAAGH,QAAQ,eAAe,SAAUC,EAAGC,GACrC,MAAU,MAAND,GAAoB,MAAPC,EAER,KAEC,MAAND,GAAoB,MAAPC,EAER,OAEFD,KAET,IAGGA,KAGXG,KAAKT,GAAOU,OAAON,EAAQH,EAAMU,WAGrClB,EAAME,UAAUiB,aAAa,SAAU,SAAU,CAC/CC,KAAM,CACJhB,QAAS,YACTiB,QAAQ,EACRC,MAAO,aAGXtB,EAAME,UAAUqB,IAAMvB,EAAME,UAAUH,OAvExCyB,EAAOC,QAAU1B,EACjBA,EAAO2B,YAAc,SACrB3B,EAAO4B,QAAU,CAAC,Q,sBCClB,SAASC,EAAO5B,GACdA,EAAME,UAAU0B,OAAS,CACvBC,QAAS,MACTC,OAAQ,CACN1B,QAAS,oBACTiB,QAAQ,GAEVU,OAAQ,CACN3B,QAAS,cACTiB,QAAQ,GAEVW,UAAW,CACT5B,QAAS,uCACTiB,QAAQ,EACRC,MAAO,UAET,mBAAoB,CAElB,CACElB,QAAS,yBACTC,YAAY,GAEd,CACED,QAAS,yBACTC,YAAY,IAGhB4B,QAAS,CACP7B,QAAS,gPACTC,YAAY,GAEd6B,QAAS,CACP9B,QAAS,4NACTC,YAAY,GAEd8B,OAAQ,CAgBN/B,QAAS,uVACTC,YAAY,GAEd+B,QAAS,CACPhC,QAAS,8BACTC,YAAY,GAEdgC,SAAU,CACRjC,QAAS,0CACTC,YAAY,GAEdiC,SAAU,CACRlC,QAAS,4BACTC,YAAY,GAEdkC,YAAa,SArEjBf,EAAOC,QAAUG,EACjBA,EAAOF,YAAc,SACrBE,EAAOD,QAAU","file":"react-syntax-highlighter_languages_refractor_racket.d08c56a86c0c1f1d990f.js","sourcesContent":["'use strict'\nvar refractorScheme = require('./scheme.js')\nmodule.exports = racket\nracket.displayName = 'racket'\nracket.aliases = ['rkt']\nfunction racket(Prism) {\n  Prism.register(refractorScheme)\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /(\\(lambda\\s+\\()[^()'\\s]+/,\n      lookbehind: true\n    }\n  }) // Add brackets to racket\n  // The basic idea here is to go through all pattens of Scheme and replace all occurrences of \"(\" with the union of \"(\"\n  // and \"[\"; Similar for \")\". This is a bit tricky because \"(\" can be escaped or inside a character set. Both cases\n  // have to be handled differently and, of course, we don't want to destroy groups, so we can only replace literal \"(\"\n  // and \")\".\n  // To do this, we use a regular expression which will parse any JS regular expression. It works because regexes are\n  // matches from left to right and already matched text cannot be matched again. We use this to first capture all\n  // escaped characters (not really, we don't get escape sequences but we don't need them). Because we already captured\n  // all escaped characters, we know that any \"[\" character is the start of a character set, so we match that character\n  // set whole.\n  // With the regex parsed, we only have to replace all escaped \"(\" (they cannot be unescaped outside of character sets)\n  // with /[([]/ and replace all \"(\" inside character sets.\n  // Note: This method does not work for \"(\" that are escaped like this /\\x28/ or this /\\u0028/.\n  Prism.languages.DFS(Prism.languages.racket, function (key, value) {\n    if (Prism.util.type(value) === 'RegExp') {\n      var source = value.source.replace(\n        /\\\\(.)|\\[\\^?((?:\\\\.|[^\\\\\\]])*)\\]/g,\n        function (m, g1, g2) {\n          if (g1) {\n            if (g1 === '(') {\n              // replace all '(' characters outside character sets\n              return '[([]'\n            }\n            if (g1 === ')') {\n              // replace all ')' characters outside character sets\n              return '[)\\\\]]'\n            }\n          }\n          if (g2) {\n            var prefix = m[1] === '^' ? '[^' : '['\n            return (\n              prefix +\n              g2.replace(/\\\\(.)|[()]/g, function (m, g1) {\n                if (m === '(' || g1 === '(') {\n                  // replace all '(' characters inside character sets\n                  return '(['\n                }\n                if (m === ')' || g1 === ')') {\n                  // replace all ')' characters inside character sets\n                  return ')\\\\]'\n                }\n                return m\n              }) +\n              ']'\n            )\n          }\n          return m\n        }\n      )\n      this[key] = RegExp(source, value.flags)\n    }\n  })\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  })\n  Prism.languages.rkt = Prism.languages.racket\n}\n","'use strict'\n\nmodule.exports = scheme\nscheme.displayName = 'scheme'\nscheme.aliases = []\nfunction scheme(Prism) {\n  Prism.languages.scheme = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    symbol: {\n      pattern: /'[^()#'\\s]+/,\n      greedy: true\n    },\n    character: {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[-a-zA-Z]+|\\S)/,\n      greedy: true,\n      alias: 'string'\n    },\n    'lambda-parameter': [\n      // https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n      {\n        pattern: /(\\(lambda\\s+)[^()'\\s]+/,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\(lambda\\s+\\()[^()']+/,\n        lookbehind: true\n      }\n    ],\n    keyword: {\n      pattern: /(\\()(?:define(?:-library|-macro|-syntax|-values)?|defmacro|(?:case-)?lambda|let(?:(?:\\*|rec)?(?:-values)?|-syntax|rec-syntax)|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-(?:case|rules))(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    builtin: {\n      pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    number: {\n      // This pattern (apart from the lookarounds) works like this:\n      //\n      // Decimal numbers\n      // <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n      // <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n      // <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n      // <dec number>     := <dec prefix>[+-]?<complex>\n      //\n      // Binary, octal, and hexadecimal numbers\n      // <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n      // <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n      // <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n      // <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n      //\n      // <number>         := <dec number>|<b.o.x. number>\n      pattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    boolean: {\n      pattern: /(^|[\\s()])#[ft](?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    operator: {\n      pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    function: {\n      pattern: /(\\()[^()'\\s]+(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    punctuation: /[()']/\n  }\n}\n"],"sourceRoot":""}