{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/java.js"],"names":["java","Prism","keywords","classNamePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","punctuation","languages","extend","keyword","function","clike","number","operator","insertBefore","greedy","alias","annotation","generics","replace","module","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAKC,IACX,SAAWA,GACV,IAAIC,EAAW,idACXC,EAAkB,uDACnBC,OACCC,EAAY,CACdC,QAASC,OAAOJ,EAAkB,gCAAgCC,QAClEI,YAAY,EACZC,OAAQ,CACNC,UAAW,CACTJ,QAAS,2CACTG,OAAQ,CACNE,YAAa,OAGjBA,YAAa,OAGjBV,EAAMW,UAAUZ,KAAOC,EAAMW,UAAUC,OAAO,QAAS,CACrD,aAAc,CACZR,EACA,CAGEC,QAASC,OACPJ,EAAkB,gCAAgCC,QAEpDI,YAAY,EACZC,OAAQJ,EAAUI,SAGtBK,QAASZ,EACTa,SAAU,CACRd,EAAMW,UAAUI,MAAMD,SACtB,CACET,QAAS,qBACTE,YAAY,IAGhBS,OAAQ,8IACRC,SAAU,CACRZ,QAAS,wEACTE,YAAY,KAGhBP,EAAMW,UAAUO,aAAa,OAAQ,SAAU,CAC7C,uBAAwB,CAEtBb,QAAS,iDACTc,QAAQ,EACRC,MAAO,YAGXpB,EAAMW,UAAUO,aAAa,OAAQ,aAAc,CACjDG,WAAY,CACVhB,QAAS,+BACTE,YAAY,EACZa,MAAO,eAETE,SAAU,CACRjB,QAAS,sEACTG,OAAQ,CACN,aAAcJ,EACdS,QAASZ,EACTS,YAAa,YACbO,SAAU,UAGdR,UAAW,CACTJ,QAASC,OACP,qJAAqJH,OAAOoB,QAC1J,cACA,WACE,OAAOtB,EAASE,WAItBI,YAAY,EACZC,OAAQ,CACNE,YAAa,SA9EpB,CAkFEV,GAtFLwB,EAAOC,QAAU1B,EACjBA,EAAK2B,YAAc,OACnB3B,EAAK4B,QAAU","file":"react-syntax-highlighter_languages_refractor_java.1c4e8fcdca0f0e29c87f.js","sourcesContent":["'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the java naming conventions\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    }\n    Prism.languages.java = Prism.languages.extend('clike', {\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(\\:\\:\\s*)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}