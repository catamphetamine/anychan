{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/ftl.js","webpack://captchan/./node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","ftl","Prism","register","FTL_EXPR","source","i","replace","comment","string","pattern","greedy","RegExp","inside","interpolation","lookbehind","alias","rest","keyword","boolean","function","number","operator","punctuation","languages","directive","content","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","match","placeholder","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_ftl.f5587d448eb888ecf749.js","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = ftl\nftl.displayName = 'ftl'\nftl.aliases = []\nfunction ftl(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    // https://freemarker.apache.org/docs/dgui_template_exp.html\n    // FTL expression with 4 levels of nesting supported\n    var FTL_EXPR = /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/\n      .source\n    for (var i = 0; i < 2; i++) {\n      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n        return FTL_EXPR\n      })\n    }\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var ftl = {\n      comment: /<#--[\\s\\S]*?-->/,\n      string: [\n        {\n          // raw string\n          pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(\n              /<expr>/g,\n              function () {\n                return FTL_EXPR\n              }\n            )\n          ),\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: RegExp(\n                /((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(\n                  /<expr>/g,\n                  function () {\n                    return FTL_EXPR\n                  }\n                )\n              ),\n              lookbehind: true,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^\\$\\{|\\}$/,\n                  alias: 'punctuation'\n                },\n                rest: null\n              }\n            }\n          }\n        }\n      ],\n      keyword: /\\b(?:as)\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      'builtin-function': {\n        pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\w+(?=\\s*\\()/,\n      number: /\\d+(?:\\.\\d+)?/,\n      operator: /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n      punctuation: /[,;.:()[\\]{}]/\n    }\n    ftl.string[1].inside.interpolation.inside.rest = ftl\n    Prism.languages.ftl = {\n      'ftl-comment': {\n        // the pattern is shortened to be more efficient\n        pattern: /^<#--[\\s\\S]*/,\n        alias: 'comment'\n      },\n      'ftl-directive': {\n        pattern: /^<[\\s\\S]+>$/,\n        inside: {\n          directive: {\n            pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          punctuation: /^<\\/?|\\/?>$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      },\n      'ftl-interpolation': {\n        pattern: /^\\$\\{[\\s\\S]*\\}$/,\n        inside: {\n          punctuation: /^\\$\\{|\\}$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var pattern = RegExp(\n        /<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(\n          /<expr>/g,\n          function () {\n            return FTL_EXPR\n          }\n        ),\n        'gi'\n      )\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ftl',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}