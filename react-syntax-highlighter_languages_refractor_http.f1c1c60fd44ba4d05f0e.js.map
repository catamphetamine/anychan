{"version":3,"sources":["webpack:///./node_modules/refractor/lang/http.js"],"names":["http","Prism","languages","request-line","pattern","inside","property","attr-name","response-status","lookbehind","header-name","alias","options","langs","httpLanguages","application/javascript","javascript","application/json","json","application/xml","xml","text/xml","text/html","html","text/css","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","RegExp","rest","insertBefore","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,IACG,SAAAA,GACHA,EAAAC,UAAAF,KAAA,CACAG,eAAA,CACAC,QAAA,8FACAC,OAAA,CAEAC,SAAA,yDAEAC,YAAA,SAGAC,kBAAA,CACAJ,QAAA,uBACAC,OAAA,CAEAC,SAAA,CACAF,QAAA,yBACAK,YAAA,KAKAC,cAAA,CACAN,QAAA,iBACAO,MAAA,YAIA,IA2BAC,EA3BAC,EAAAZ,EAAAC,UACAY,EAAA,CACAC,yBAAAF,EAAAG,WACAC,mBAAAJ,EAAAK,MAAAL,EAAAG,WACAG,kBAAAN,EAAAO,IACAC,WAAAR,EAAAO,IACAE,YAAAT,EAAAU,KACAC,WAAAX,EAAAY,KAGAC,EAAA,CACAT,oBAAA,EACAE,mBAAA,GAQA,SAAAQ,EAAAC,GACA,IAAAC,EAAAD,EAAAE,QAAA,gBAEA,YAAAF,EAAA,KADA,wBAAAC,EAAA,gBACA,IAKA,QAAAD,KAAAd,EACA,GAAAA,EAAAc,GAAA,CACAhB,KAAA,GACA,IAAAR,EAAAsB,EAAAE,GACAD,EAAAC,GACAA,EACAhB,EAAAgB,GAAA,CACAxB,QAAA2B,OACA,qBACA3B,EACA,yCACA,KAEAK,YAAA,EACAJ,OAAA,CACA2B,KAAAlB,EAAAc,KAKAhB,GACAX,EAAAC,UAAA+B,aAAA,qBAAArB,GA7EG,CA+EAX,GAnFHiC,EAAAC,QAAAnC,EACAA,EAAAoC,YAAA,OACApC,EAAAqC,QAAA","file":"react-syntax-highlighter_languages_refractor_http.f1c1c60fd44ba4d05f0e.js","sourcesContent":["'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function(Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Verb\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n          // Path or query argument\n          'attr-name': /:\\w+/\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\n        inside: {\n          // Status, e.g. 200 OK\n          property: {\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n            lookbehind: true\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    }\n    // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    }\n    // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    }\n    // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType] = {\n          pattern: RegExp(\n            '(content-type:\\\\s*' +\n              pattern +\n              '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\n            'i'\n          ),\n          lookbehind: true,\n          inside: {\n            rest: httpLanguages[contentType]\n          }\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options)\n    }\n  })(Prism)\n}\n"],"sourceRoot":""}