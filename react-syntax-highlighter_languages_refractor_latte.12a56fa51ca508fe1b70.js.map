{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/latte.js","webpack://captchan/./node_modules/refractor/lang/markup-templating.js","webpack://captchan/./node_modules/refractor/lang/php.js"],"names":["refractorMarkupTemplating","refractorPhp","latte","Prism","register","languages","comment","ld","pattern","inside","punctuation","tag","alias","rd","php","markupLatte","extend","insertBefore","lookbehind","hooks","add","env","language","buildPlaceholders","grammar","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","keyword","boolean","constant","delimiter","variable","package","property","string_interpolation","greedy","interpolation","test"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_latte.12a56fa51ca508fe1b70.js","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nvar refractorPhp = require('./php.js')\nmodule.exports = latte\nlatte.displayName = 'latte'\nlatte.aliases = []\nfunction latte(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  Prism.register(refractorPhp)\n  ;(function (Prism) {\n    Prism.languages.latte = {\n      comment: /^\\{\\*[\\s\\S]*/,\n      ld: {\n        pattern: /^\\{(?:[=_]|\\/?(?!\\d|\\w+\\()\\w+|)/,\n        inside: {\n          punctuation: /^\\{\\/?/,\n          tag: {\n            pattern: /.+/,\n            alias: 'important'\n          }\n        }\n      },\n      rd: {\n        pattern: /\\}$/,\n        inside: {\n          punctuation: /.+/\n        }\n      },\n      php: {\n        pattern: /\\S(?:[\\s\\S]*\\S)?/,\n        alias: 'language-php',\n        inside: Prism.languages.php\n      }\n    }\n    var markupLatte = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        'n-attr': {\n          pattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,\n          inside: {\n            'attr-name': {\n              pattern: /^[^\\s=]+/,\n              alias: 'important'\n            },\n            'attr-value': {\n              pattern: /=[\\s\\S]+/,\n              inside: {\n                punctuation: [\n                  /^=/,\n                  {\n                    pattern: /^(\\s*)[\"']|[\"']$/,\n                    lookbehind: true\n                  }\n                ],\n                php: {\n                  pattern: /\\S(?:[\\s\\S]*\\S)?/,\n                  inside: Prism.languages.php\n                }\n              }\n            }\n          }\n        }\n      },\n      markupLatte.tag\n    )\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (env.language !== 'latte') {\n        return\n      }\n      var lattePattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*[\\s\\S]*?\\*\\/)*?\\}/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'latte',\n        lattePattern\n      )\n      env.grammar = markupLatte\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'latte')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;(function (Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    })\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    })\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }) // Must be defined after the function pattern\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    })\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    }) // The different types of PHP strings \"replace\" the C-like standard string\n    delete Prism.languages.php['string']\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}