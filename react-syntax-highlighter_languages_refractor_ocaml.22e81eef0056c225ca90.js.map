{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/ocaml.js"],"names":["ocaml","Prism","languages","comment","string","pattern","greedy","number","directive","alias","label","type_variable","variant","module","keyword","boolean","operator","punctuation","exports","displayName","aliases"],"mappings":"+FAKA,SAASA,EAAMC,GACbA,EAAMC,UAAUF,MAAQ,CACtBG,QAAS,mBACTC,OAAQ,CACN,CACEC,QAAS,wBACTC,QAAQ,GAEV,CACED,QAAS,qDACTC,QAAQ,IAGZC,OAAQ,yEACRC,UAAW,CACTH,QAAS,SACTI,MAAO,aAETC,MAAO,CACLL,QAAS,SACTI,MAAO,YAETE,cAAe,CACbN,QAAS,SACTI,MAAO,YAETG,QAAS,CACPP,QAAS,OACTI,MAAO,YAETI,OAAQ,CACNR,QAAS,aACTI,MAAO,YAITK,QAAS,gSACTC,QAAS,qBAETC,SAAU,8FACVC,YAAa,yBA3CjBJ,EAAOK,QAAUlB,EACjBA,EAAMmB,YAAc,QACpBnB,EAAMoB,QAAU","file":"react-syntax-highlighter_languages_refractor_ocaml.22e81eef0056c225ca90.js","sourcesContent":["'use strict'\n\nmodule.exports = ocaml\nocaml.displayName = 'ocaml'\nocaml.aliases = []\nfunction ocaml(Prism) {\n  Prism.languages.ocaml = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: [\n      {\n        pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      {\n        pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n        greedy: true\n      }\n    ],\n    number: /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'important'\n    },\n    label: {\n      pattern: /\\B~\\w+/,\n      alias: 'function'\n    },\n    type_variable: {\n      pattern: /\\B'\\w+/,\n      alias: 'function'\n    },\n    variant: {\n      pattern: /`\\w+/,\n      alias: 'variable'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w+/,\n      alias: 'variable'\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    keyword: /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    // Custom operators are allowed\n    operator: /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /[(){}\\[\\]|.,:;]|\\b_\\b/\n  }\n}\n"],"sourceRoot":""}