{"version":3,"sources":["webpack://captchan/./node_modules/refractor/lang/js-templates.js"],"names":["jsTemplates","Prism","templateString","languages","javascript","templateLiteralPattern","pattern","source","interpolationObject","inside","interpolationPunctuationObject","interpolationPattern","createTemplate","language","tag","RegExp","lookbehind","greedy","alias","getPlaceholder","counter","toUpperCase","tokenizeWithHooks","code","grammar","env","hooks","run","tokens","tokenize","tokenizeInterpolationExpression","expression","tempGrammar","length","args","push","apply","splice","Token","tokenizeEmbedded","_tokens","interpolation","placeholderCounter","placeholderMap","embeddedTokens","map","token","placeholder","interpolationExpression","content","indexOf","join","placeholders","Object","keys","walkTokens","i","s","index","before","substring","middle","after","replacement","afterTokens","concat","Array","isArray","filter","Boolean","supportedLanguages","js","typescript","ts","jsx","tsx","stringContent","value","add","findTemplateStrings","l","type","embedded","module","exports","displayName","aliases"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_jsTemplates.cdeb416b2824a62e6948.js","sourcesContent":["'use strict'\n\nmodule.exports = jsTemplates\njsTemplates.displayName = 'jsTemplates'\njsTemplates.aliases = []\nfunction jsTemplates(Prism) {\n  ;(function (Prism) {\n    var templateString = Prism.languages.javascript['template-string'] // see the pattern in prism-javascript.js\n    var templateLiteralPattern = templateString.pattern.source\n    var interpolationObject = templateString.inside['interpolation']\n    var interpolationPunctuationObject =\n      interpolationObject.inside['interpolation-punctuation']\n    var interpolationPattern = interpolationObject.pattern.source\n    /**\n     * Creates a new pattern to match a template string with a special tag.\n     *\n     * This will return `undefined` if there is no grammar with the given language id.\n     *\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\n     * @param {string} tag The regex pattern to match the tag.\n     * @returns {object | undefined}\n     * @example\n     * createTemplate('css', /\\bcss/.source);\n     */\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined\n      }\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      }\n    }\n    Prism.languages.javascript['template-string'] = [\n      // styled-jsx:\n      //   css`a { color: #25F; }`\n      // styled-components:\n      //   styled.h1`color: red;`\n      createTemplate(\n        'css',\n        /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/\n          .source\n      ), // html`<p></p>`\n      // div.innerHTML = `<p></p>`\n      createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n      createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n      createTemplate('markdown', /\\b(?:md|markdown)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n      createTemplate(\n        'graphql',\n        /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source\n      ), // vanilla template string\n      templateString\n    ].filter(Boolean)\n    /**\n     * Returns a specific placeholder literal for the given language.\n     *\n     * @param {number} counter\n     * @param {string} language\n     * @returns {string}\n     */\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___'\n    }\n    /**\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n     *\n     * @param {string} code\n     * @param {any} grammar\n     * @param {string} language\n     * @returns {(string|Token)[]}\n     */\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      }\n      Prism.hooks.run('before-tokenize', env)\n      env.tokens = Prism.tokenize(env.code, env.grammar)\n      Prism.hooks.run('after-tokenize', env)\n      return env.tokens\n    }\n    /**\n     * Returns the token of the given JavaScript interpolation expression.\n     *\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n     * @returns {Token}\n     */\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {}\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject\n      /** @type {Array} */\n      var tokens = Prism.tokenize(expression, tempGrammar)\n      if (tokens.length === 3) {\n        /**\n         * The token array will look like this\n         * [\n         *     [\"interpolation-punctuation\", \"${\"]\n         *     \"...\" // JavaScript expression of the interpolation\n         *     [\"interpolation-punctuation\", \"}\"]\n         * ]\n         */\n        var args = [1, 1]\n        args.push.apply(\n          args,\n          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')\n        )\n        tokens.splice.apply(tokens, args)\n      }\n      return new Prism.Token(\n        'interpolation',\n        tokens,\n        interpolationObject.alias,\n        expression\n      )\n    }\n    /**\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n     *\n     * This function has 3 phases:\n     *\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\n     *    The placeholder will have the syntax of a identify of the target language.\n     * 2. Tokenize the code with placeholders.\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n     *    tokenized as two tokens by the grammar of the embedded language.\n     *\n     * @param {string} code\n     * @param {object} grammar\n     * @param {string} language\n     * @returns {Token}\n     */\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n      // because they might be escaped, we need a lookbehind, so we use Prism\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      }) // replace all interpolations with a placeholder which is not in the code already\n      var placeholderCounter = 0\n      /** @type {Object<string, string>} */\n      var placeholderMap = {}\n      var embeddedCode = _tokens\n        .map(function (token) {\n          if (typeof token === 'string') {\n            return token\n          } else {\n            var interpolationExpression = token.content\n            var placeholder\n            while (\n              code.indexOf(\n                (placeholder = getPlaceholder(placeholderCounter++, language))\n              ) !== -1\n            ) {}\n            placeholderMap[placeholder] = interpolationExpression\n            return placeholder\n          }\n        })\n        .join('') // 2. Tokenize the embedded code\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language) // 3. Re-insert the interpolation\n      var placeholders = Object.keys(placeholderMap)\n      placeholderCounter = 0\n      /**\n       *\n       * @param {(Token|string)[]} tokens\n       * @returns {void}\n       */\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return\n          }\n          var token = tokens[i]\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter]\n            var s =\n              typeof token === 'string'\n                ? token\n                : /** @type {string} */\n                  token.content\n            var index = s.indexOf(placeholder)\n            if (index !== -1) {\n              ++placeholderCounter\n              var before = s.substring(0, index)\n              var middle = tokenizeInterpolationExpression(\n                placeholderMap[placeholder]\n              )\n              var after = s.substring(index + placeholder.length)\n              var replacement = []\n              if (before) {\n                replacement.push(before)\n              }\n              replacement.push(middle)\n              if (after) {\n                var afterTokens = [after]\n                walkTokens(afterTokens)\n                replacement.push.apply(replacement, afterTokens)\n              }\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                i += replacement.length - 1\n              } else {\n                token.content = replacement\n              }\n            }\n          } else {\n            var content = token.content\n            if (Array.isArray(content)) {\n              walkTokens(content)\n            } else {\n              walkTokens([content])\n            }\n          }\n        }\n      }\n      walkTokens(embeddedTokens)\n      return new Prism.Token(\n        language,\n        embeddedTokens,\n        'language-' + language,\n        code\n      )\n    }\n    /**\n     * The languages for which JS templating will handle tagged template literals.\n     *\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n     */\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return\n      }\n      /**\n       * Finds and tokenizes all template strings with an embedded languages.\n       *\n       * @param {(Token | string)[]} tokens\n       * @returns {void}\n       */\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (typeof token === 'string') {\n            continue\n          }\n          var content = token.content\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content])\n            }\n            continue\n          }\n          if (token.type === 'template-string') {\n            /**\n             * A JavaScript template-string token will look like this:\n             *\n             * [\"template-string\", [\n             *     [\"template-punctuation\", \"`\"],\n             *     (\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n             *         or\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n             *                                  It also has an alias which is the language of the embedded code.\n             *     ),\n             *     [\"template-punctuation\", \"`\"]\n             * ]]\n             */\n            var embedded = content[1]\n            if (\n              content.length === 3 &&\n              typeof embedded !== 'string' &&\n              embedded.type === 'embedded-code'\n            ) {\n              // get string content\n              var code = stringContent(embedded)\n              var alias = embedded.alias\n              var language = Array.isArray(alias) ? alias[0] : alias\n              var grammar = Prism.languages[language]\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue\n              }\n              content[1] = tokenizeEmbedded(code, grammar, language)\n            }\n          } else {\n            findTemplateStrings(content)\n          }\n        }\n      }\n      findTemplateStrings(env.tokens)\n    })\n    /**\n     * Returns the string content of a token or token stream.\n     *\n     * @param {string | Token | (string | Token)[]} value\n     * @returns {string}\n     */\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('')\n      } else {\n        return stringContent(value.content)\n      }\n    }\n  })(Prism)\n}\n"],"sourceRoot":""}